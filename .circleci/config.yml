version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.6.1
  slack: circleci/slack@3.4.2
jobs:
  pytest:
    parameters:
      kind:
        description: "Type of test"
        default: "test_unit"
        type: enum
        enum: ["test_unit", "test_regression", "typecheck", "test_dataflow"]
    docker:
      - image: us.gcr.io/vcm-ml/circleci-miniconda-gfortran:latest
        auth:
          username: _json_key
          password: $DECODED_GOOGLE_CREDENTIALS
        environment:
          GOOGLE_APPLICATION_CREDENTIALS: /etc/key.json
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c0:ce:b5:cb:ea:78:dc:be:ce:b0:b4:02:9e:28:db:39"
      - run: apt-get update && apt-get install -y uuid
      - run:
          name: "Save GCS for tests."
          command: |
            echo $ENCODED_GOOGLE_CREDENTIALS | \
            base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS
      - run: make update_submodules
      - run:
          name: "Concatenate package dependency files"
          command: cat environment.yml .circleci/environment.lock > combined_deps.txt
      - restore_cache:
          keys:
            # change this string to invalidate cache
            - v2-fv3net-env-{{ checksum "combined_deps.txt" }}
      - run:
          name: "Install fv3net dependencies"
          command: |
            make install_deps
            cat .circleci/environment.lock
      - save_cache:
          key: v2-fv3net-env-{{ checksum "combined_deps.txt" }}
          paths:
            - /opt/conda/envs/fv3net
      - run:
          name: "Install fv3net packages"
          command: make install_local_packages
      - run: |
          source activate fv3net
          make <<parameters.kind>>
      - run:
          name: "Coverage Report"
          command: |
            source activate fv3net
            make coverage_report
            # don't let report failures kill the job
            exit 0

  argo:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: |
            sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get update
            sudo apt-get install -y kubectl
      - run: sudo apt-get install make
      - run: make test_argo

  build_default:
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:201903-01
    environment:
      GOOGLE_PROJECT_ID: vcm-ml
      GOOGLE_COMPUTE_ZONE: us-central1
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - gcp-gcr/gcr-auth:
          gcloud-service-key: DECODED_GOOGLE_CREDENTIALS
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c0:ce:b5:cb:ea:78:dc:be:ce:b0:b4:02:9e:28:db:39"
      - run: sudo apt-get install -y make jq
      - run:
          name: "Pull submodules"
          command: |
            git submodule update --init --recursive
      - run:
          name: Build fv3net images
          command: |
            make build_images
      - run: make test_prognostic_run
      - run:
          name: Push fv3net images
          command: |
            echo $CIRCLE_BRANCH
            echo $CIRCLE_TAG
            if [[ "$CIRCLE_BRANCH" == "master" ]]
            then
                echo "pushing untagged images as 'latest'"
                make push_images VERSION=latest
            fi

            if [[ ! -z "$CIRCLE_TAG" ]]
            then
              make push_images VERSION=$CIRCLE_TAG
            fi

            # push all images with sha for testing later on
            echo "pushing tagged images $CIRCLE_SHA1"
            make push_images VERSION=$CIRCLE_SHA1
      - slack/status:
          fail_only: true
          mentions: "channel"
  mypy:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run: sudo pip install mypy==0.770 xarray
      - run: make typecheck
  lint:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run: sudo pip install black==19.10b0 flake8==3.7.9
      - run: make lint

  integration_tests:
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
      CLUSTER_NAME: ml-cluster-dev
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get install -y wget jq make gettext 
            wget -qO /bin/yq https://github.com/mikefarah/yq/releases/download/3.2.1/yq_linux_386
            chmod +x /bin/yq
      - run:
          name: Setup firewall rule
          command: |
            ci_public_ip=$(wget -qO- http://ipecho.net/plain | xargs echo)
            echo $ENCODED_GOOGLE_CREDENTIALS | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
            gcloud config set project $K8S_PROXY_PROJECT
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
            proxy_ip=$(gcloud compute instances list --filter="labels.role=$K8S_PROXY_TARGET_TAG" \
                --filter="labels.cluster=$CLUSTER_NAME" \
                --format="value(networkInterfaces.accessConfigs[0].natIP)")
            firewall_name="ci-to-gke-proxy-"$(openssl rand -hex 5)
            echo 'export firewall_name='$firewall_name >> $BASH_ENV
            echo 'export proxy_ip='$proxy_ip >> $BASH_ENV
            gcloud compute firewall-rules create $firewall_name \
                --allow tcp:$K8S_PROXY_PORT \
                --network $K8S_PROXY_NETWORK --direction IN \
                --source-ranges $ci_public_ip
      - run:
          name: Setup kubectl
          command: |
            gcloud container clusters get-credentials --zone us-central1-c  $CLUSTER_NAME
            kube_cluster_name=$(kubectl config get-clusters | grep $CLUSTER_NAME)
            kubectl config set-cluster $kube_cluster_name --server="https://"$proxy_ip
            echo $K8S_PROXY_ENCODED_CA_CRT | base64 -d > proxy.crt
            kubectl config set-cluster $kube_cluster_name --certificate-authority="./proxy.crt"
      - run:
          name: Submit integration tests
          # Note that 'end_to_end_configuration.yml' in k8s image used for orchestration was
          # during the build job above
          command: |
            make run_integration_tests VERSION=$CIRCLE_SHA1
      - run:
          name: Firewall rule deletion
          when: always
          command: gcloud compute firewall-rules delete $firewall_name
      - slack/status:
          fail_only: true
          mentions: "channel"
workflows:
  version: 2
  test_and_lint:
    jobs:
      - lint
      - mypy
      - argo
      - pytest:
          name: pytest-<<matrix.kind>>
          matrix:
            parameters:
              kind: ["test_unit", "test_regression"]
      - hold:
          type: approval
          filters:
            branches:
              ignore:
                - master
      - pytest:
          kind: test_dataflow
          requires:
            - hold
      - build_default:
          requires:
            - hold
      - integration_tests:
          requires:
            - build_default
  master_tests:
    jobs:
      - lint
      - mypy
      - argo
      - pytest:
          kind: test_dataflow
          name: "Test Dataflow"
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master
      - build_default:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master
      - integration_tests:
          requires:
            - build_default
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master
