version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.6.1
jobs:
  pytest_default:    
    docker:
      - image: us.gcr.io/vcm-ml/circleci-miniconda-gfortran:latest
        auth:
          username: _json_key
          password: $DECODED_GOOGLE_CREDENTIALS
        environment:
          GOOGLE_APPLICATION_CREDENTIALS: key.json
    steps:
      - checkout
      - run:
          name: "Save GCS for tests."
          command: |
            echo $ENCODED_GOOGLE_CREDENTIALS | \
            base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS
      - run: make update_submodules
      - run:
          name: "Concatenate package dependency files"
          command: cat environment.yml .circleci/.installed_build_env_deps > combined_deps.txt
      - restore_cache:
          keys:
            - v2-fv3net-env-{{ checksum "combined_deps.txt" }}
      - run:
          name: "Install fv3net dependencies"
          command: |
            make install_deps
            cat .circleci/.installed_build_env_deps
      - save_cache:
          key: v2-fv3net-env-{{ checksum "combined_deps.txt" }}
          paths:
            - /opt/conda/envs/fv3net
      - run:
          name: "Install fv3net packages"
          command: make install_local_packages
      - run: | 
          source activate fv3net
          pytest -m "not regression" --mpl --mpl-baseline-path=tests/baseline_images

  build_default:
    machine:
      docker_layer_caching: true
    environment:
      GOOGLE_PROJECT_ID: vcm-ml
      GOOGLE_COMPUTE_ZONE: us-central1
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - gcp-gcr/gcr-auth:
          gcloud-service-key: DECODED_GOOGLE_CREDENTIALS
      - checkout
      - run: sudo apt-get install make
      - run:
          name: "Pull submodules"
          command: |
            git submodule update --init --recursive
      - run:
          name: Build fv3net images 
          command: |
            if [[ -z "$CIRCLE_TAG" ]]
            then
                use_version="latest"
            else
                use_version=$CIRCLE_TAG
            fi
            make build_images VERSION=$use_version
      - run:
          name: Run tests in fv3net image
          command: |
              echo $DECODED_GOOGLE_CREDENTIALS > $GOOGLE_APPLICATION_CREDENTIALS
              bash docker/fv3net/run_tests_in_image.sh $CIRCLE_TAG
      - run:
          name: Push fv3net images
          command: |
            echo $CIRCLE_BRANCH
            echo $CIRCLE_TAG
            if [[ "$CIRCLE_BRANCH" == "master" ]]
            then
                echo "pushing untagged images as 'latest'"
                make push_images VERSION=latest
            fi
            if [[ ! -z "$CIRCLE_TAG" ]]
            then
                echo "pushing tagged images $CIRCLE_TAG"
                make push_images VERSION=$CIRCLE_TAG
            fi
  
  lint:
    docker:
    - image: circleci/python:3.7
    steps:
    - checkout
    - run: sudo pip install black==19.10b0 flake8
    - run: make lint

  integration_tests:
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - checkout
      - run:
          name: Setup firewall rule
          command: |
            apt-get install wget
            ci_public_ip=$(wget -qO- http://ipecho.net/plain | xargs echo)
            echo $ENCODED_GOOGLE_CREDENTIALS | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
            gcloud config set project $K8S_PROXY_PROJECT
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
            proxy_ip=$(gcloud compute instances list --filter="labels.role=$K8S_PROXY_TARGET_TAG" \
                --format="value(networkInterfaces.accessConfigs[0].natIP)")
            firewall_name="ci-to-gke-proxy-"$(openssl rand -hex 5)
            echo 'export firewall_name='$firewall_name >> $BASH_ENV
            echo 'export proxy_ip='$proxy_ip >> $BASH_ENV
            gcloud compute firewall-rules create $firewall_name \
                --allow tcp:$K8S_PROXY_PORT \
                --network $K8S_PROXY_NETWORK --direction IN \
                --source-ranges $ci_public_ip
      - run:
          name: Setup kubectl
          command: |
            cluster_name=$(gcloud container clusters list --format="value(name)")
            gcloud container clusters get-credentials --zone us-central1-c  $cluster_name
            kube_cluster_name=$(kubectl config get-clusters | tail -n 1)
            kubectl config set-cluster $kube_cluster_name --server="https://"$proxy_ip
            echo $K8S_PROXY_ENCODED_CA_CRT | base64 -d > proxy.crt
            kubectl config set-cluster $kube_cluster_name --certificate-authority="./proxy.crt"
      - run:
          name: Submit integration tests
          command: kubectl apply -f tests/end_to_end_integration/submit_e2e_job_k8s.yml
      - run:
          name: Firewall rule deletion
          when: always
          command: gcloud compute firewall-rules delete $firewall_name




  
workflows:
  version: 2
  test_and_lint:
    jobs:
      - lint:
          filters:
            branches:
              ignore: /.*/
      - pytest_default:
          filters:
            branches:
              ignore: /.*/
  build_and_push:
    jobs:
      - pytest_default:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master
      - build_default:
          requires: 
            - pytest_default
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master
  test_integrations:
    jobs:
      - integration_tests:
          filters:
            branches:
              only: feature/int-test
            
              
