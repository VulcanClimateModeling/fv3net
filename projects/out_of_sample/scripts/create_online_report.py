# This report is designed to be temporary, and can be removed once the online
# out-of-sample diagnostics are incorporated into the primary reporting script.

import atexit
import dataclasses
import os
from typing import MutableMapping, Sequence
import uuid
import fsspec
import fv3fit
from fv3net.diagnostics.offline._helpers import copy_outputs
import report
import vcm
import yaml
from create_report import (
    _STATE_SUFFIX,
    OOSModel,
    _cleanup_temp_dir,
    _get_parser,
    make_diagnostic_plots,
)
import tempfile
from vcm.catalog import catalog
import xarray as xr

_DIAGS_SUFFIX = "diags.zarr"
_NOVELTY_DIAGS_SUFFIX = "diags_novelty.zarr"


@dataclasses.dataclass
class OnlineOOSModel(OOSModel):
    run_path: str


def get_online_diags(oos_model: OnlineOOSModel) -> xr.Dataset:
    """
    Returns a dataset containing the is_novelty and novelty_score fields that reflect
    how a given novelty detector behaved on its online run.
    """
    diags_url = os.path.join(oos_model.run_path, _DIAGS_SUFFIX)
    diags = xr.open_zarr(fsspec.get_mapper(diags_url))
    fsspec.get_mapper
    novelty_diags_url = os.path.join(oos_model.run_path, _NOVELTY_DIAGS_SUFFIX)
    fs = vcm.cloud.get_fs(novelty_diags_url)
    if "is_novelty" in diags.data_vars:
        print(f"Reading online novelty data from model diagnostics, at {diags_url}.")
        return diags
    elif fs.exists(novelty_diags_url):
        print(
            f"Reading online novelty data from "
            + f"previous computation, at {novelty_diags_url}."
        )
        diags = xr.open_zarr(fsspec.get_mapper(novelty_diags_url))
        return diags
    else:
        state_url = os.path.join(oos_model.run_path, _STATE_SUFFIX)
        print(f"Computing online novelty data from states at {state_url}.")
        ds = xr.open_zarr(fsspec.get_mapper(state_url))
        _, diags = oos_model.nd.predict_novelties(ds)
        mapper = fsspec.get_mapper(novelty_diags_url)
        diags.to_zarr(mapper, mode="w", consolidated=True)
        print(f"Saved online novelty data to {novelty_diags_url}.")
        return diags


def create_report(args):
    temp_output_dir = tempfile.TemporaryDirectory()
    atexit.register(_cleanup_temp_dir, temp_output_dir)

    common_coords = {"tile": range(6), "x": range(48), "y": range(48)}
    grid = catalog["grid/c48"].read().assign_coords(common_coords)

    with open(args.config_path, "r") as f:
        try:
            config = yaml.safe_load(f)
            print(config)
        except yaml.YAMLError as exc:
            print(exc)
    models = [
        OnlineOOSModel(
            model["name"],
            fv3fit.load(model["model_url"]),
            model["model_url"],
            model["run_url"],
        )
        for model in config["models"]
    ]
    print(models)
    report_url = config["report_url"]
    print(report_url)
    report_id = uuid.uuid4().hex
    if config["append_random_id_to_url"]:
        report_url = os.path.join(report_url, f"report-{report_id}")

    metadata = {
        "models": [
            {"name": model.name, "model_url": model.nd_path, "run_url": model.run_path}
            for model in models
        ],
        "report_url": report_url,
    }
    report_sections: MutableMapping[str, Sequence[str]] = {}

    # online diagnostics: novelty detector evaluated the data generated by the model
    model_diags = {}
    for model in models:
        model_diags[model.name] = get_online_diags(model)

    make_diagnostic_plots(
        report_sections, temp_output_dir, models, model_diags, grid,
    )

    # creates html text based on the above sections
    html_index = report.create_html(
        sections=report_sections,
        title="Online metrics for out-of-sample analysis",
        metadata=metadata,
        metrics=None,
        collapse_metadata=True,
    )

    with open(os.path.join(temp_output_dir.name, "index.html"), "w") as f:
        f.write(html_index)

    copy_outputs(temp_output_dir.name, report_url)
    print(f"Saved report to {report_url}")
    if report_url.startswith("gs://"):
        web_url = report_url.replace("gs://", "https://storage.googleapis.com/")
        web_url = os.path.join(web_url, "index.html")
        print(f"Find this report now at {web_url}.")


if __name__ == "__main__":
    parser = _get_parser()
    args = parser.parse_args()
    create_report(args)
