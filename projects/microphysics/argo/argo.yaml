# yaml-language-server: $schema=https://raw.githubusercontent.com/argoproj/argo-workflows/master/api/jsonschema/schema.json
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: prognostic-microphysics-
  labels:
    project: microphysics-emulation
    job_type: prognostic-evaluation
    experiment: default
spec:
  entrypoint: prognostic-run
  arguments:
    parameters:
      - name: training-config
        value: ""
      - name: flags
        value: ""
      - name: gpu-train
        value: "true"
      - name: experiment
        value: default
      - name: config
        value: ""
      - name: fv3fit_image_tag
        value: latest
      - name: image_tag
        value: 811d4a88b8b8f29d727f2d61f46f96b770c8ab47
      - name: wandb-tags
        value: ""
      - name: wandb-group
        value: ""
  podSpecPatch: |
    containers:
      - name: main
        env:
          - name: WANDB_TAGS
            value: "{{workflow.parameters.wandb-tags}}"
  volumes:
  - name: gcp-key-secret
    secret:
      defaultMode: 420
      secretName: gcp-key
  templates:
  - name: prognostic-run
    inputs:
      parameters:
        - name: tag
          value: "{{workflow.name}}"
    dag:
      tasks:
        - name: run-offline
          template: run-model
          arguments:
            parameters:
            - name: tag
              value: "{{inputs.parameters.tag}}-offline"
            - name: config
              value:  "{{workflow.parameters.config}}"
            - name: on_off_flag
              value: --offline
        - name: run-online
          template: run-model
          arguments:
            parameters:
            - name: tag
              value: "{{inputs.parameters.tag}}-online"
            - name: config
              value:  "{{workflow.parameters.config}}"
            - name: on_off_flag
              value: --online
        - name: piggy-online
          template: piggyback-diags
          dependencies: [run-online]
          arguments:
            parameters:
            - name: tag
              value: "{{inputs.parameters.tag}}-online"
        - name: score-model-posthoc-adjusted
          template: score-model
          dependencies: [run-online]
          arguments:
            parameters:
            - name: "training-config"
              value: ""
            - name: "tag"
              value: "{{inputs.parameters.tag}}-masked-scores"
            - name: "wandb-group"
              value: "{{inputs.parameters.tag}}-online"
            - name: prognostic-emulation-config
              value: "{{workflow.parameters.config}}"
        - name: piggy-offline
          template: piggyback-diags
          dependencies: [run-offline]
          arguments:
            parameters:
            - name: tag
              value: "{{inputs.parameters.tag}}-offline"
        - name: prognostic-diags
          dependencies: [run-offline, run-online]
          template: prognostic-diags
          arguments:
            parameters:
            - name: tag
              value: "{{inputs.parameters.tag}}-online"
            - name: baseline_tag
              value: "{{inputs.parameters.tag}}-offline"
  - name: run-model
    inputs:
      parameters:
      - name: tag
      - name: config
      - name: on_off_flag
    tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "med-sim-pool"
      effect: "NoSchedule"
    container:
      image: "us.gcr.io/vcm-ml/prognostic_run:{{workflow.parameters.image_tag}}"
      imagePullPolicy: Always
      workingDir: "/fv3net/projects/microphysics"
      resources:
        requests:
          memory: "16Gi"
          cpu: "7500m"
        limits:
          memory: "16Gi"
          cpu: "7500m"
      envFrom:
      - secretRef:
          name: wandb-andrep
      env:
      - name: GOOGLE_APPLICATION_CREDENTIALS
        value: /secret/gcp-credentials/key.json
      - name: WANDB_RUN_GROUP
        value: "{{inputs.parameters.tag}}"
      - name: FSSPEC_GS_REQUESTER_PAYS
        value: "vcm-ml"
      volumeMounts:
      - mountPath: /secret/gcp-credentials
        name: gcp-key-secret
      command: ["bash", "-c", "-x", "-e"]
      args:
      - |
        echo "{{inputs.parameters.config}}" | base64 --decode > fv3config.yaml
        python3 scripts/prognostic_run.py \
          --tag "{{inputs.parameters.tag}}" \
          --config-path fv3config.yaml \
          "{{inputs.parameters.on_off_flag}}"
  - name: piggyback-diags
    inputs:
      parameters:
      - name: tag
    tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "med-sim-pool"
      effect: "NoSchedule"
    container:
      image: "us.gcr.io/vcm-ml/fv3net:latest"
      imagePullPolicy: Always
      resources:
        requests:
          memory: "6Gi"
          cpu: "3000m"
        limits:
          memory: "15Gi"
          cpu: "3000m"
      envFrom:
      - secretRef:
          name: wandb-andrep
      env:
      - name: GOOGLE_APPLICATION_CREDENTIALS
        value: /secret/gcp-credentials/key.json
      - name: WANDB_RUN_GROUP
        value: "{{inputs.parameters.tag}}"
      volumeMounts:
      - mountPath: /secret/gcp-credentials
        name: gcp-key-secret
      workingDir: "/home/jovyan/fv3net/projects/microphysics"
      command:
      - prognostic_run_diags
      - piggy
      - "{{inputs.parameters.tag}}"
  - name: prognostic-diags
    inputs:
      parameters:
      - name: tag
      - name: baseline_tag
    tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "med-sim-pool"
      effect: "NoSchedule"
    container:
      image: "us.gcr.io/vcm-ml/fv3net:latest"
      imagePullPolicy: Always
      resources:
        requests:
          memory: "6Gi"
          cpu: "3000m"
        limits:
          memory: "15Gi"
          cpu: "3000m"
      envFrom:
      - secretRef:
          name: wandb-andrep
      env:
      - name: GOOGLE_APPLICATION_CREDENTIALS
        value: /secret/gcp-credentials/key.json
      - name: WANDB_RUN_GROUP
        value: "{{inputs.parameters.tag}}"
      volumeMounts:
      - mountPath: /secret/gcp-credentials
        name: gcp-key-secret
      workingDir: "/home/jovyan/fv3net/projects/microphysics"
      command: ["python3"]
      args:
      - scripts/prognostic_evaluate.py
      - "{{inputs.parameters.tag}}"
      - --baseline-tag
      - "{{inputs.parameters.baseline_tag}}"
  - name: training
    steps:
    - - name: train-model
        template: train-model
        when: "{{workflow.parameters.gpu-train}} == false"
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: training-config
            value: "{{workflow.parameters.training-config}}"
          - name: flags
            value: "{{workflow.parameters.flags}}"
      - name: train-model-gpu
        template: train-model-gpu
        when: "{{workflow.parameters.gpu-train}} == true"
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: training-config
            value: "{{workflow.parameters.training-config}}"
          - name: flags
            value: "{{workflow.parameters.flags}}"
    - - name: score-model
        template: score-model
        arguments:
          parameters:
          - name: training-config
            value: "{{workflow.parameters.training-config}}"
          - name: flags
            value: "{{workflow.parameters.flags}}"
  - name: train-model
    inputs:
      parameters:
        - name: training-config
        - {name: flags, value: " "}
    container:
      image: "us.gcr.io/vcm-ml/fv3fit:{{workflow.parameters.fv3fit_image_tag}}"
      command: ["bash", "-c", "-x"]
      envFrom:
      - secretRef:
          name: wandb-andrep
      env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /secret/gcp-credentials/key.json
        - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          value: /secret/gcp-credentials/key.json
        - name: WANDB_NAME
          value: "{{workflow.name}}"
        - name: WANDB_RUN_GROUP
          value: "{{workflow.parameters.wandb-group}}"
      volumeMounts:
        - mountPath: /secret/gcp-credentials
          name: gcp-key-secret
      resources:
        limits:
          cpu: "7"
          memory: "20Gi"
        requests:
          cpu: "4"
          memory: "15Gi"
      args:
        - |
          echo "{{inputs.parameters.training-config}}" | base64 --decode > training_config.yaml

          python3 -m fv3fit.train_microphysics \
            --config-path training_config.yaml \
            --wandb.job_type train \
            {{inputs.parameters.flags}}
    tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "med-sim-pool"
      effect: "NoSchedule"
  - name: train-model-gpu
    inputs:
      parameters:
        - name: training-config
        - {name: flags, value: " "}
    container:
      image: "us.gcr.io/vcm-ml/fv3fit:{{workflow.parameters.fv3fit_image_tag}}"
      command: ["bash", "-c", "-x"]
      envFrom:
      - secretRef:
          name: wandb-andrep
      env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /secret/gcp-credentials/key.json
        - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          value: /secret/gcp-credentials/key.json
        - name: WANDB_NAME
          value: "{{workflow.name}}"
        - name: WANDB_RUN_GROUP
          value: "{{workflow.parameters.wandb-group}}"
      volumeMounts:
        - mountPath: /secret/gcp-credentials
          name: gcp-key-secret
      resources:
        limits:
          cpu: "7"
          memory: "20Gi"
          nvidia.com/gpu: 1
        requests:
          cpu: "4"
          memory: "15Gi"
      args:
        - |
          echo "{{inputs.parameters.training-config}}" | base64 --decode > training_config.yaml
          export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/nvidia/lib64:$LD_LIBRARY_PATH
          export PATH=/usr/local/nvidia/bin:$PATH
          nvidia-smi

          python3 -m fv3fit.train_microphysics \
            --config-path training_config.yaml \
            --wandb.job_type train \
            {{inputs.parameters.flags}}
    tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "gpu-sim-pool"
      effect: "NoSchedule"
    - key: "nvidia.com/gpu"
      operator: "Exists"
      effect: "NoSchedule"
  - name: score-model
    inputs:
      parameters:
        - name: training-config
        - name: flags
          value: ""
        - name: tag
          value: "{{workflow.name}}"
        - name: wandb-group
          value: "{{workflow.parameters.wandb-group}}"
        - name: prognostic-emulation-config
          value: ""
    container:
      image: "us.gcr.io/vcm-ml/fv3fit:{{workflow.parameters.fv3fit_image_tag}}"
      command: ["bash", "-c", "-x"]
      workingDir: "/fv3net/projects/microphysics"
      envFrom:
      - secretRef:
          name: wandb-andrep
      env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /secret/gcp-credentials/key.json
        - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          value: /secret/gcp-credentials/key.json
        - name: WANDB_NAME
          value: "{{input.parameters.tag}}"
        - name: WANDB_RUN_GROUP
          value: "{{input.parameters.wandb-group}}"
      volumeMounts:
        - mountPath: /secret/gcp-credentials
          name: gcp-key-secret
      resources:
        limits:
          cpu: "7"
          memory: "28G"
        requests:
          cpu: "7"
          memory: "28G"
      args:
        - |
          echo "{{inputs.parameters.training-config}}" | base64 --decode > training_config.yaml

          emu_config="{{inputs.parameters.emulation-config}}"
          if [ -z $emu_config ]
          then
            emu_flag=""
          else
            echo $emu_config | base64 --decode > emulation_config.yaml
            emu_flag="--emulator_config emulation_config.yaml"
          fi

          python3 scripts/score_training.py \
            --config-path training_config.yaml \
            ${emu_flag} \
            --wandb.job_type train_score \
            {{inputs.parameters.flags}}
    tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "med-sim-pool"
      effect: "NoSchedule"
  - name: end-to-end
    steps:
      - - name: train-model-gpu
          template: train-model-gpu
          arguments:
            parameters:
            - name: training-config
              value: "{{workflow.parameters.training-config}}"
            - name: flags
              value: "{{workflow.parameters.flags}}"
      - - name: prognostic-run
          template: prognostic-run
        - name: score-model
          template: score-model
          arguments:
            parameters:
            - name: training-config
              value: "{{workflow.parameters.training-config}}"
            - name: flags
              value: "{{workflow.parameters.flags}}"