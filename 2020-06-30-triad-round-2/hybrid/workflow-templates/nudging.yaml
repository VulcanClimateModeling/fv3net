# vim: set ts=2 sw=2 sts=2:
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: nudging
spec:
  templates:
    - name: nudging
      inputs:
        parameters:
          - name: restart-volume
            value: restart-data
          - name: nudging-config
          - name: times
          - name: working-volume
          - name: output-url
          - name: fv3gfs-image
            value: us.gcr.io/vcm-ml/fv3gfs-python:v0.4.3
          - name: fv3net-image
            value: us.gcr.io/vcm-ml/fv3net:95df9bd2939e4ca2f103c4b2925206f429236ad7
      steps:
        - - template: prepare-config
            name: prepare-config
            arguments:
              parameters:
                - {name: working-volume, value: "{{inputs.parameters.working-volume}}"}
                - {name: fv3net-image, value: "{{inputs.parameters.fv3net-image}}"}
                - {name: nudging-config, value: "{{inputs.parameters.nudging-config}}"}
                - {name: times, value: "{{inputs.parameters.times}}"}
        - - name: run-model
            template: fv3gfs
            arguments:
              parameters:
                - {name: working-volume, value: "{{inputs.parameters.working-volume}}"}
                - {name: restart-volume, value: "{{inputs.parameters.restart-volume}}"}
                - {name: fv3gfs-image, value: "{{inputs.parameters.fv3gfs-image}}"}
        - - name: upload-outputs
            template: upload-data
            arguments:
              parameters:
                - {name: working-volume, value: "{{inputs.parameters.working-volume}}"}
                - {name: output-url, value: "{{inputs.parameters.output-url}}"}
    - name: prepare-config
      inputs:
        parameters:
          - {name: working-volume}
          - {name: fv3net-image}
          - {name: nudging-config}
          - {name: times}
      container:
        # need to run as root to read the mounted PVC
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
        image: "{{inputs.parameters.fv3net-image}}"
        command: ["/bin/bash", "-c"]
        workingDir: /home/jovyan/fv3net/workflows/nudging
        args:
        - |
          cp runfile.py /mnt/data/runfile.py

          cat << EOF > times.json
          {{inputs.parameters.times}}
          EOF

          cat << EOF > config.yaml
          {{inputs.parameters.nudging-config}}
          EOF

          python prepare_config.py \
            --timesteps times.json \
            config.yaml \
            > /mnt/data/fv3config.yaml

        volumeMounts:
          - name: "{{inputs.parameters.working-volume}}"
            mountPath: /mnt/data
    - name: upload-data
      inputs:
        parameters:
          - {name: working-volume}
          - {name: output-url}
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "climate-sim-pool"
        effect: "NoSchedule"
      container:
        image: google/cloud-sdk:latest
        command: ["/bin/bash"]
        args:
          - -c
          - |
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS && \
            gsutil -m -q rsync -r -e /mnt/data/rundir '{{inputs.parameters.output-url}}'
        env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /secret/gcp-credentials/key.json
        imagePullPolicy: Always
        resources:
          limits:
            memory: 8Gi
          requests:
            cpu: "6"
            memory: 8Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - name: "{{inputs.parameters.working-volume}}"
            mountPath: /mnt/data
          - name: gcp-key-secret
            mountPath: /secret/gcp-credentials
            readOnly: true
    - name: fv3gfs
      inputs:
        parameters:
          - {name: working-volume}
          - {name: restart-volume}
          - {name: fv3gfs-image}
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "climate-sim-pool"
        effect: "NoSchedule"
      container:
        command:
          - python
          - -m
          - fv3config.fv3run._native_main
          - '[["/mnt/data/fv3config.yaml", "/mnt/data/rundir"],
            {"runfile": "/mnt/data/runfile.py", "capture_output":
            false}]'
        env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /secret/gcp-credentials/key.json
          - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
            value: /secret/gcp-credentials/key.json
        image: '{{inputs.parameters.fv3gfs-image}}'
        imagePullPolicy: Always
        resources:
          limits:
            memory: 8Gi
          requests:
            cpu: "6"
            memory: 8Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - name: "{{inputs.parameters.restart-volume}}"
            mountPath: /mnt/input
          - name: "{{inputs.parameters.working-volume}}"
            mountPath: /mnt/data
          - name: gcp-key-secret
            mountPath: /secret/gcp-credentials
            readOnly: true
