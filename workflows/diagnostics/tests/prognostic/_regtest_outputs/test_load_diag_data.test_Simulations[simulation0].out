xarray.Dataset {
dimensions:
	y = 48 ;
	x = 48 ;
	time = 8 ;
	pressure = 35 ;
	tile = 6 ;

variables:
	float32 y(y) ;
	float32 x(x) ;
	object time(time) ;
	float64 pressure(pressure) ;
	float64 air_temperature(time, tile, y, x, pressure) ;
		air_temperature:units = degK ;
		air_temperature:long_name = air_temperature ;
	float64 eastward_wind(time, tile, y, x, pressure) ;
		eastward_wind:units = m/s ;
		eastward_wind:long_name = eastward_wind ;
	float64 northward_wind(time, tile, y, x, pressure) ;
		northward_wind:units = m/s ;
		northward_wind:long_name = northward_wind ;
	float64 pressure_thickness_of_atmospheric_layer(time, tile, y, x, pressure) ;
		pressure_thickness_of_atmospheric_layer:units = Pa ;
		pressure_thickness_of_atmospheric_layer:long_name = pressure_thickness_of_atmospheric_layer ;
	float64 specific_humidity(time, tile, y, x, pressure) ;
		specific_humidity:units = kg/kg ;
		specific_humidity:long_name = specific_humidity ;
	float64 vertical_thickness_of_atmospheric_layer(time, tile, y, x, pressure) ;
		vertical_thickness_of_atmospheric_layer:units = m ;
		vertical_thickness_of_atmospheric_layer:long_name = vertical_thickness_of_atmospheric_layer ;
	float64 vertical_wind(time, tile, y, x, pressure) ;
		vertical_wind:units = m/s ;
		vertical_wind:long_name = vertical_wind ;

// global attributes:
}xarray.Dataset {
dimensions:
	x = 48 ;
	y = 48 ;
	time = 32 ;
	tile = 6 ;

variables:
	float32 x(x) ;
		x:cartesian_axis = X ;
		x:long_name = T-cell longitude ;
		x:units = degrees_E ;
	float32 y(y) ;
		y:cartesian_axis = Y ;
		y:long_name = T-cell latitude ;
		y:units = degrees_N ;
	object time(time) ;
	float32 PRESsfc(tile, time, y, x) ;
		PRESsfc:cell_methods = time: point ;
		PRESsfc:long_name = surface pressure ;
		PRESsfc:units = Pa ;
	float32 PWAT(tile, time, y, x) ;
		PWAT:cell_methods = time: point ;
		PWAT:long_name = Total water path ;
		PWAT:units = kg/m**2 ;
	float32 RH850(tile, time, y, x) ;
		RH850:cell_methods = time: point ;
		RH850:long_name = 850-mb relative humidity ;
		RH850:units = % ;
	float32 TMP200(tile, time, y, x) ;
		TMP200:cell_methods = time: point ;
		TMP200:long_name = 200-mb temperature ;
		TMP200:units = K ;
	float32 TMP500(tile, time, y, x) ;
		TMP500:cell_methods = time: point ;
		TMP500:long_name = 500-mb temperature ;
		TMP500:units = K ;
	float32 TMP850(tile, time, y, x) ;
		TMP850:cell_methods = time: point ;
		TMP850:long_name = 850-mb temperature ;
		TMP850:units = K ;
	float32 TMPlowest(tile, time, y, x) ;
		TMPlowest:cell_methods = time: point ;
		TMPlowest:long_name = lowest layer temperature ;
		TMPlowest:units = K ;
	float32 VIL(tile, time, y, x) ;
		VIL:cell_methods = time: point ;
		VIL:long_name = Liquid water path ;
		VIL:units = kg/m**2 ;
	float32 VORT500(tile, time, y, x) ;
		VORT500:cell_methods = time: point ;
		VORT500:long_name = 500-mb vorticity ;
		VORT500:units = 1/s ;
	float32 area(tile, y, x) ;
		area:cell_methods = time: point ;
		area:long_name = cell area ;
		area:units = m**2 ;
	float32 h500(tile, time, y, x) ;
		h500:cell_methods = time: point ;
		h500:long_name = 500-mb height ;
		h500:units = m ;
	float32 q500(tile, time, y, x) ;
		q500:cell_methods = time: point ;
		q500:long_name = 500-mb specific humidity ;
		q500:units = kg/kg ;
	float32 w500(tile, time, y, x) ;
		w500:cell_methods = time: point ;
		w500:long_name = 500-mb w-wind ;
		w500:units = m/s ;
	float64 column_heating_due_to_machine_learning(time, tile, y, x) ;
		column_heating_due_to_machine_learning:units = W/m^2 ;
		column_heating_due_to_machine_learning:long_name = column_heating_due_to_machine_learning ;
	float64 net_moistening_due_to_machine_learning(time, tile, y, x) ;
		net_moistening_due_to_machine_learning:units = kg/m^2/s ;
		net_moistening_due_to_machine_learning:long_name = net_moistening_due_to_machine_learning ;
	float64 physics_precip(time, tile, y, x) ;
		physics_precip:units = kg/m^2/s ;
		physics_precip:long_name = physics_precip ;
	float64 total_precipitation_rate(time, tile, y, x) ;
		total_precipitation_rate:units = kg/m^2/s ;
		total_precipitation_rate:long_name = total_precipitation_rate ;
	float64 water_vapor_path(time, tile, y, x) ;
		water_vapor_path:units = mm ;
		water_vapor_path:long_name = water_vapor_path ;
	float32 CPRATsfc(tile, time, y, x) ;
		CPRATsfc:cell_methods = time: point ;
		CPRATsfc:long_name = averaged bucket surface convective precipitation rate ;
		CPRATsfc:units = kg/m**2/s ;
	float32 DLWRFsfc(tile, time, y, x) ;
		DLWRFsfc:cell_methods = time: point ;
		DLWRFsfc:long_name = surface downward longwave flux ;
		DLWRFsfc:units = W/m**2 ;
	float32 DSWRFsfc(tile, time, y, x) ;
		DSWRFsfc:cell_methods = time: point ;
		DSWRFsfc:long_name = averaged surface downward shortwave flux ;
		DSWRFsfc:units = W/m**2 ;
	float32 DSWRFtoa(tile, time, y, x) ;
		DSWRFtoa:cell_methods = time: point ;
		DSWRFtoa:long_name = top of atmos downward shortwave flux ;
		DSWRFtoa:units = W/m**2 ;
	float32 LHTFLsfc(tile, time, y, x) ;
		LHTFLsfc:cell_methods = time: point ;
		LHTFLsfc:long_name = surface latent heat flux ;
		LHTFLsfc:units = w/m**2 ;
	float32 PRATEsfc(tile, time, y, x) ;
		PRATEsfc:cell_methods = time: point ;
		PRATEsfc:long_name = bucket surface precipitation rate ;
		PRATEsfc:units = kg/m**2/s ;
	float32 SHTFLsfc(tile, time, y, x) ;
		SHTFLsfc:cell_methods = time: point ;
		SHTFLsfc:long_name = surface sensible heat flux ;
		SHTFLsfc:units = w/m**2 ;
	float32 ULWRFsfc(tile, time, y, x) ;
		ULWRFsfc:cell_methods = time: point ;
		ULWRFsfc:long_name = surface upward longwave flux ;
		ULWRFsfc:units = W/m**2 ;
	float32 ULWRFtoa(tile, time, y, x) ;
		ULWRFtoa:cell_methods = time: point ;
		ULWRFtoa:long_name = top of atmos upward longwave flux ;
		ULWRFtoa:units = W/m**2 ;
	float32 USWRFsfc(tile, time, y, x) ;
		USWRFsfc:cell_methods = time: point ;
		USWRFsfc:long_name = averaged surface upward shortwave flux ;
		USWRFsfc:units = W/m**2 ;
	float32 USWRFtoa(tile, time, y, x) ;
		USWRFtoa:cell_methods = time: point ;
		USWRFtoa:long_name = top of atmos upward shortwave flux ;
		USWRFtoa:units = W/m**2 ;
	float32 uflx(tile, time, y, x) ;
		uflx:cell_methods = time: point ;
		uflx:long_name = instantaneous u component of surface stress ;
		uflx:units = XXX ;
	float32 vflx(tile, time, y, x) ;
		vflx:cell_methods = time: point ;
		vflx:long_name = instantaneous v component of surface stress ;
		vflx:units = XXX ;

// global attributes:
}