3d
Prognostic Run
xarray.Dataset {
dimensions:
	time = 8 ;
	x = 48 ;
	y = 48 ;
	pressure = 35 ;
	tile = 6 ;

variables:
	object time(time) ;
	float32 x(x) ;
	float32 y(y) ;
	float64 pressure(pressure) ;
	float32 air_temperature(tile, time, y, x, pressure) ;
		air_temperature:cell_methods = time: point ;
		air_temperature:long_name = temperature ;
		air_temperature:units = K ;
		air_temperature:valid_range = [100.0, 350.0] ;
	float32 eastward_wind(tile, time, y, x, pressure) ;
		eastward_wind:cell_methods = time: point ;
		eastward_wind:long_name = zonal wind ;
		eastward_wind:units = m/sec ;
		eastward_wind:valid_range = [-330.0, 330.0] ;
	float32 northward_wind(tile, time, y, x, pressure) ;
		northward_wind:cell_methods = time: point ;
		northward_wind:long_name = meridional wind ;
		northward_wind:units = m/sec ;
		northward_wind:valid_range = [-330.0, 330.0] ;
	float32 pressure_thickness_of_atmospheric_layer(tile, time, y, x, pressure) ;
		pressure_thickness_of_atmospheric_layer:cell_methods = time: point ;
		pressure_thickness_of_atmospheric_layer:long_name = pressure thickness ;
		pressure_thickness_of_atmospheric_layer:units = pa ;
	float32 specific_humidity(tile, time, y, x, pressure) ;
		specific_humidity:cell_methods = time: point ;
		specific_humidity:long_name = specific humidity ;
		specific_humidity:units = kg/kg ;
	float32 vertical_wind(tile, time, y, x, pressure) ;
		vertical_wind:cell_methods = time: point ;
		vertical_wind:long_name = vertical wind ;
		vertical_wind:units = m/sec ;
		vertical_wind:valid_range = [-100.0, 100.0] ;

// global attributes:
}
time 08762d03ff9aecd3690c342c7189c570
x dc9136a3153fe1adada82a1b225b8d1d
y dc9136a3153fe1adada82a1b225b8d1d
pressure 5ffba331ffbf7a5f41da67d710427656
Verification
xarray.Dataset {
dimensions:
	time = 8 ;
	x = 48 ;
	y = 48 ;
	pressure = 35 ;
	tile = 6 ;

variables:
	object time(time) ;
	float32 x(x) ;
	float32 y(y) ;
	float64 pressure(pressure) ;
	float32 air_temperature(tile, time, y, x, pressure) ;
		air_temperature:cell_methods = time: point ;
		air_temperature:long_name = temperature ;
		air_temperature:units = K ;
		air_temperature:valid_range = [100.0, 350.0] ;
	float32 eastward_wind(tile, time, y, x, pressure) ;
		eastward_wind:cell_methods = time: point ;
		eastward_wind:long_name = zonal wind ;
		eastward_wind:units = m/sec ;
		eastward_wind:valid_range = [-330.0, 330.0] ;
	float32 northward_wind(tile, time, y, x, pressure) ;
		northward_wind:cell_methods = time: point ;
		northward_wind:long_name = meridional wind ;
		northward_wind:units = m/sec ;
		northward_wind:valid_range = [-330.0, 330.0] ;
	float32 pressure_thickness_of_atmospheric_layer(tile, time, y, x, pressure) ;
		pressure_thickness_of_atmospheric_layer:cell_methods = time: point ;
		pressure_thickness_of_atmospheric_layer:long_name = pressure thickness ;
		pressure_thickness_of_atmospheric_layer:units = pa ;
	float32 specific_humidity(tile, time, y, x, pressure) ;
		specific_humidity:cell_methods = time: point ;
		specific_humidity:long_name = specific humidity ;
		specific_humidity:units = kg/kg ;
	float32 vertical_wind(tile, time, y, x, pressure) ;
		vertical_wind:cell_methods = time: point ;
		vertical_wind:long_name = vertical wind ;
		vertical_wind:units = m/sec ;
		vertical_wind:valid_range = [-100.0, 100.0] ;

// global attributes:
}
time 08762d03ff9aecd3690c342c7189c570
x dc9136a3153fe1adada82a1b225b8d1d
y dc9136a3153fe1adada82a1b225b8d1d
pressure 5ffba331ffbf7a5f41da67d710427656
grid
xarray.Dataset {
dimensions:
	tile = 6 ;
	y = 48 ;
	x = 48 ;
	y_interface = 49 ;
	x_interface = 49 ;

variables:
	float32 area(tile, y, x) ;
		area:cell_methods = time: point ;
		area:long_name = cell area ;
		area:units = m**2 ;
	float32 lat(tile, y, x) ;
		lat:cell_methods = time: point ;
		lat:long_name = latitude ;
		lat:units = degrees_N ;
	float32 latb(tile, y_interface, x_interface) ;
		latb:cell_methods = time: point ;
		latb:long_name = latitude ;
		latb:units = degrees_N ;
	float32 lon(tile, y, x) ;
		lon:cell_methods = time: point ;
		lon:long_name = longitude ;
		lon:units = degrees_E ;
	float32 lonb(tile, y_interface, x_interface) ;
		lonb:cell_methods = time: point ;
		lonb:long_name = longitude ;
		lonb:units = degrees_E ;
	float64 x(x) ;
		x:cartesian_axis = X ;
		x:long_name = T-cell longitude ;
		x:units = degrees_E ;
	float64 x_interface(x_interface) ;
		x_interface:cartesian_axis = X ;
		x_interface:long_name = cell corner longitude ;
		x_interface:units = degrees_E ;
	float64 y(y) ;
		y:cartesian_axis = Y ;
		y:long_name = T-cell latitude ;
		y:units = degrees_N ;
	float64 y_interface(y_interface) ;
		y_interface:cartesian_axis = Y ;
		y_interface:long_name = cell corner latitude ;
		y_interface:units = degrees_N ;

// global attributes:
}
x 62828491827a146d12b842d73f965371
x_interface 8062ce3b8dd2f97ff35b3d26189231ca
y 62828491827a146d12b842d73f965371
y_interface 8062ce3b8dd2f97ff35b3d26189231ca
2d
Prognostic Run
xarray.Dataset {
dimensions:
	x = 48 ;
	y = 48 ;
	time = 104 ;
	tile = 6 ;

variables:
	float32 x(x) ;
		x:cartesian_axis = X ;
		x:long_name = T-cell longitude ;
		x:units = degrees_E ;
	float32 y(y) ;
		y:cartesian_axis = Y ;
		y:long_name = T-cell latitude ;
		y:units = degrees_N ;
	object time(time) ;
	float32 PRESsfc(tile, time, y, x) ;
		PRESsfc:cell_methods = time: point ;
		PRESsfc:long_name = surface pressure ;
		PRESsfc:units = Pa ;
	float32 PRMSL(tile, time, y, x) ;
		PRMSL:cell_methods = time: point ;
		PRMSL:long_name = sea-level pressure ;
		PRMSL:units = mb ;
		PRMSL:valid_range = [800.0, 1200.0] ;
	float32 PWAT(tile, time, y, x) ;
		PWAT:cell_methods = time: point ;
		PWAT:long_name = Total water path ;
		PWAT:units = kg/m**2 ;
	float32 RH1000(tile, time, y, x) ;
		RH1000:cell_methods = time: point ;
		RH1000:long_name = 1000-mb relative humidity ;
		RH1000:units = % ;
	float32 RH500(tile, time, y, x) ;
		RH500:cell_methods = time: point ;
		RH500:long_name = 500-mb relative humidity ;
		RH500:units = % ;
	float32 RH700(tile, time, y, x) ;
		RH700:cell_methods = time: point ;
		RH700:long_name = 700-mb relative humidity ;
		RH700:units = % ;
	float32 RH850(tile, time, y, x) ;
		RH850:cell_methods = time: point ;
		RH850:long_name = 850-mb relative humidity ;
		RH850:units = % ;
	float32 RH925(tile, time, y, x) ;
		RH925:cell_methods = time: point ;
		RH925:long_name = 925-mb relative humidity ;
		RH925:units = % ;
	float32 TMP200(tile, time, y, x) ;
		TMP200:cell_methods = time: point ;
		TMP200:long_name = 200-mb temperature ;
		TMP200:units = K ;
	float32 TMP500(tile, time, y, x) ;
		TMP500:cell_methods = time: point ;
		TMP500:long_name = 500-mb temperature ;
		TMP500:units = K ;
	float32 TMP500_300(tile, time, y, x) ;
		TMP500_300:cell_methods = time: point ;
		TMP500_300:long_name = mean 300-500 mb temp ;
		TMP500_300:units = K ;
	float32 TMP850(tile, time, y, x) ;
		TMP850:cell_methods = time: point ;
		TMP850:long_name = 850-mb temperature ;
		TMP850:units = K ;
	float32 TMPlowest(tile, time, y, x) ;
		TMPlowest:cell_methods = time: point ;
		TMPlowest:long_name = lowest layer temperature ;
		TMPlowest:units = K ;
	float32 UGRD200(tile, time, y, x) ;
		UGRD200:cell_methods = time: point ;
		UGRD200:long_name = 200-mb u ;
		UGRD200:units = m/s ;
	float32 UGRD50(tile, time, y, x) ;
		UGRD50:cell_methods = time: point ;
		UGRD50:long_name = 50-mb u ;
		UGRD50:units = m/s ;
	float32 UGRD500(tile, time, y, x) ;
		UGRD500:cell_methods = time: point ;
		UGRD500:long_name = 500-mb u ;
		UGRD500:units = m/s ;
	float32 UGRD850(tile, time, y, x) ;
		UGRD850:cell_methods = time: point ;
		UGRD850:long_name = 850-mb u ;
		UGRD850:units = m/s ;
	float32 UGRDlowest(tile, time, y, x) ;
		UGRDlowest:cell_methods = time: point ;
		UGRDlowest:long_name = surface u-wind ;
		UGRDlowest:units = m/sec ;
		UGRDlowest:valid_range = [-200.0, 200.0] ;
	float32 VGRD200(tile, time, y, x) ;
		VGRD200:cell_methods = time: point ;
		VGRD200:long_name = 200-mb v ;
		VGRD200:units = m/s ;
	float32 VGRD50(tile, time, y, x) ;
		VGRD50:cell_methods = time: point ;
		VGRD50:long_name = 50-mb v ;
		VGRD50:units = m/s ;
	float32 VGRD500(tile, time, y, x) ;
		VGRD500:cell_methods = time: point ;
		VGRD500:long_name = 500-mb v ;
		VGRD500:units = m/s ;
	float32 VGRD850(tile, time, y, x) ;
		VGRD850:cell_methods = time: point ;
		VGRD850:long_name = 850-mb v ;
		VGRD850:units = m/s ;
	float32 VGRDlowest(tile, time, y, x) ;
		VGRDlowest:cell_methods = time: point ;
		VGRDlowest:long_name = surface v-wind ;
		VGRDlowest:units = m/sec ;
		VGRDlowest:valid_range = [-200.0, 200.0] ;
	float32 VIL(tile, time, y, x) ;
		VIL:cell_methods = time: point ;
		VIL:long_name = Liquid water path ;
		VIL:units = kg/m**2 ;
	float32 VORT200(tile, time, y, x) ;
		VORT200:cell_methods = time: point ;
		VORT200:long_name = 200-mb vorticity ;
		VORT200:units = 1/s ;
	float32 VORT500(tile, time, y, x) ;
		VORT500:cell_methods = time: point ;
		VORT500:long_name = 500-mb vorticity ;
		VORT500:units = 1/s ;
	float32 VORT850(tile, time, y, x) ;
		VORT850:cell_methods = time: point ;
		VORT850:long_name = 850-mb vorticity ;
		VORT850:units = 1/s ;
	float32 area(tile, y, x) ;
		area:cell_methods = time: point ;
		area:long_name = cell area ;
		area:units = m**2 ;
	float32 h200(tile, time, y, x) ;
		h200:cell_methods = time: point ;
		h200:long_name = 200-mb height ;
		h200:units = m ;
	float32 h500(tile, time, y, x) ;
		h500:cell_methods = time: point ;
		h500:long_name = 500-mb height ;
		h500:units = m ;
	float32 h850(tile, time, y, x) ;
		h850:cell_methods = time: point ;
		h850:long_name = 850-mb height ;
		h850:units = m ;
	float32 iw(tile, time, y, x) ;
		iw:cell_methods = time: point ;
		iw:long_name = Ice water path ;
		iw:units = kg/m**2 ;
	float32 kinetic_energy(tile, time, y, x) ;
		kinetic_energy:cell_methods = time: point ;
		kinetic_energy:long_name = Total KE ;
		kinetic_energy:units = m^2/s^2 ;
	float32 total_energy(tile, time, y, x) ;
		total_energy:cell_methods = time: point ;
		total_energy:long_name = Total Energy ;
		total_energy:units = J/kg ;
	float32 w200(tile, time, y, x) ;
		w200:cell_methods = time: point ;
		w200:long_name = 200-mb w-wind ;
		w200:units = m/s ;
	float32 w500(tile, time, y, x) ;
		w500:cell_methods = time: point ;
		w500:long_name = 500-mb w-wind ;
		w500:units = m/s ;
	float32 w850(tile, time, y, x) ;
		w850:cell_methods = time: point ;
		w850:long_name = 850-mb w-wind ;
		w850:units = m/s ;
	float64 net_heating(time, tile, y, x) ;
		net_heating:units = W/m^2 ;
		net_heating:long_name = net_heating ;
	float64 net_moistening(time, tile, y, x) ;
		net_moistening:units = kg/m^2/s ;
		net_moistening:long_name = net_moistening ;
	float64 physics_precip(time, tile, y, x) ;
		physics_precip:units = kg/m^2/s ;
		physics_precip:long_name = physics_precip ;
	float64 water_vapor_path(time, tile, y, x) ;
		water_vapor_path:long_name = water vapor path ;
		water_vapor_path:units = mm ;
	float32 CPRATsfc(tile, time, y, x) ;
		CPRATsfc:cell_methods = time: point ;
		CPRATsfc:long_name = averaged bucket surface convective precipitation rate ;
		CPRATsfc:units = kg/m**2/s ;
	float32 DLWRFsfc(tile, time, y, x) ;
		DLWRFsfc:cell_methods = time: point ;
		DLWRFsfc:long_name = surface downward longwave flux ;
		DLWRFsfc:units = W/m**2 ;
	float32 DPT2m(tile, time, y, x) ;
		DPT2m:cell_methods = time: point ;
		DPT2m:long_name = 2 meter dew point temperature ;
		DPT2m:units = K ;
	float32 DSWRFsfc(tile, time, y, x) ;
		DSWRFsfc:cell_methods = time: point ;
		DSWRFsfc:long_name = averaged surface downward shortwave flux ;
		DSWRFsfc:units = W/m**2 ;
	float32 DSWRFtoa(tile, time, y, x) ;
		DSWRFtoa:cell_methods = time: point ;
		DSWRFtoa:long_name = top of atmos downward shortwave flux ;
		DSWRFtoa:units = W/m**2 ;
	float32 GRAUPELsfc(tile, time, y, x) ;
		GRAUPELsfc:cell_methods = time: point ;
		GRAUPELsfc:long_name = bucket surface graupel precipitation rate ;
		GRAUPELsfc:units = kg/m**2/s ;
	float32 HPBLsfc(tile, time, y, x) ;
		HPBLsfc:cell_methods = time: point ;
		HPBLsfc:long_name = surface planetary boundary layer height ;
		HPBLsfc:units = m ;
	float32 ICECsfc(tile, time, y, x) ;
		ICECsfc:cell_methods = time: point ;
		ICECsfc:long_name = surface ice concentration (ice=1; no ice=0) ;
		ICECsfc:units = fraction ;
	float32 ICEsfc(tile, time, y, x) ;
		ICEsfc:cell_methods = time: point ;
		ICEsfc:long_name = bucket surface ice precipitation rate ;
		ICEsfc:units = kg/m**2/s ;
	float32 LHTFLsfc(tile, time, y, x) ;
		LHTFLsfc:cell_methods = time: point ;
		LHTFLsfc:long_name = surface latent heat flux ;
		LHTFLsfc:units = w/m**2 ;
	float32 MAXWIND10m(tile, time, y, x) ;
		MAXWIND10m:cell_methods = time: point ;
		MAXWIND10m:long_name = maximum wind speed ;
		MAXWIND10m:units = m/s ;
	float32 PRATEsfc(tile, time, y, x) ;
		PRATEsfc:cell_methods = time: point ;
		PRATEsfc:long_name = bucket surface precipitation rate ;
		PRATEsfc:units = kg/m**2/s ;
	float32 SHTFLsfc(tile, time, y, x) ;
		SHTFLsfc:cell_methods = time: point ;
		SHTFLsfc:long_name = surface sensible heat flux ;
		SHTFLsfc:units = w/m**2 ;
	float32 SLMSKsfc(tile, time, y, x) ;
		SLMSKsfc:cell_methods = time: point ;
		SLMSKsfc:long_name = sea-land-ice mask (0-sea, 1-land, 2-ice) ;
		SLMSKsfc:units = numerical ;
	float32 SNOWsfc(tile, time, y, x) ;
		SNOWsfc:cell_methods = time: point ;
		SNOWsfc:long_name = bucket surface snow precipitation rate ;
		SNOWsfc:units = kg/m**2/s ;
	float32 SOILM(tile, time, y, x) ;
		SOILM:cell_methods = time: point ;
		SOILM:long_name = total column soil moisture content ;
		SOILM:units = kg/m**2 ;
	float32 SOILT1(tile, time, y, x) ;
		SOILT1:cell_methods = time: point ;
		SOILT1:long_name = soil temperature 0-10cm ;
		SOILT1:units = K ;
	float32 SOILT2(tile, time, y, x) ;
		SOILT2:cell_methods = time: point ;
		SOILT2:long_name = soil temperature 10-40cm ;
		SOILT2:units = K ;
	float32 SOILT3(tile, time, y, x) ;
		SOILT3:cell_methods = time: point ;
		SOILT3:long_name = soil temperature 40-100cm ;
		SOILT3:units = K ;
	float32 SOILT4(tile, time, y, x) ;
		SOILT4:cell_methods = time: point ;
		SOILT4:long_name = soil temperature 100-200cm ;
		SOILT4:units = K ;
	float32 SPFH2m(tile, time, y, x) ;
		SPFH2m:cell_methods = time: point ;
		SPFH2m:long_name = 2m specific humidity ;
		SPFH2m:units = kg/kg ;
	float32 TMAX2m(tile, time, y, x) ;
		TMAX2m:cell_methods = time: point ;
		TMAX2m:long_name = max temperature at 2m height ;
		TMAX2m:units = K ;
	float32 TMP2m(tile, time, y, x) ;
		TMP2m:cell_methods = time: point ;
		TMP2m:long_name = 2m temperature ;
		TMP2m:units = K ;
	float32 TMPsfc(tile, time, y, x) ;
		TMPsfc:cell_methods = time: point ;
		TMPsfc:long_name = surface temperature ;
		TMPsfc:units = K ;
	float32 UGRD10m(tile, time, y, x) ;
		UGRD10m:cell_methods = time: point ;
		UGRD10m:long_name = 10 meter u wind ;
		UGRD10m:units = m/s ;
	float32 ULWRFsfc(tile, time, y, x) ;
		ULWRFsfc:cell_methods = time: point ;
		ULWRFsfc:long_name = surface upward longwave flux ;
		ULWRFsfc:units = W/m**2 ;
	float32 ULWRFtoa(tile, time, y, x) ;
		ULWRFtoa:cell_methods = time: point ;
		ULWRFtoa:long_name = top of atmos upward longwave flux ;
		ULWRFtoa:units = W/m**2 ;
	float32 USWRFsfc(tile, time, y, x) ;
		USWRFsfc:cell_methods = time: point ;
		USWRFsfc:long_name = averaged surface upward shortwave flux ;
		USWRFsfc:units = W/m**2 ;
	float32 USWRFtoa(tile, time, y, x) ;
		USWRFtoa:cell_methods = time: point ;
		USWRFtoa:long_name = top of atmos upward shortwave flux ;
		USWRFtoa:units = W/m**2 ;
	float32 VGRD10m(tile, time, y, x) ;
		VGRD10m:cell_methods = time: point ;
		VGRD10m:long_name = 10 meter v wind ;
		VGRD10m:units = m/s ;
	float32 uflx(tile, time, y, x) ;
		uflx:cell_methods = time: point ;
		uflx:long_name = instantaneous u component of surface stress ;
		uflx:units = XXX ;
	float32 vflx(tile, time, y, x) ;
		vflx:cell_methods = time: point ;
		vflx:long_name = instantaneous v component of surface stress ;
		vflx:units = XXX ;
	float32 column_integrated_pQ1(tile, time, y, x) ;
		column_integrated_pQ1:long_name = <pQ1> column integrated heating from physics ;
		column_integrated_pQ1:units = W/m^2 ;
	float64 column_integrated_pQ2(tile, time, y, x) ;
		column_integrated_pQ2:long_name = <pQ2> column integrated moistening from physics ;
		column_integrated_pQ2:units = mm/day ;
	float64 column_integrated_dQ1(time, tile, y, x) ;
		column_integrated_dQ1:long_name = <dQ1> column integrated heating from ML ;
		column_integrated_dQ1:units = W/m^2 ;
	float64 column_integrated_dQ2(time, tile, y, x) ;
		column_integrated_dQ2:long_name = <dQ2> column integrated moistening from ML ;
		column_integrated_dQ2:units = mm/day ;
	float64 column_integrated_Q1(tile, time, y, x) ;
		column_integrated_Q1:long_name = <Q1> column integrated heating from physics + ML + nudging ;
		column_integrated_Q1:units = W/m^2 ;
	float64 column_integrated_Q2(tile, time, y, x) ;
		column_integrated_Q2:long_name = <Q2> column integrated moistening from physics + ML + nudging ;
		column_integrated_Q2:units = mm/day ;
	float64 total_precip_to_surface(tile, time, y, x) ;
		total_precip_to_surface:long_name = total precip to surface (max(PRATE-<dQ2>-<nQ2>, 0)) ;
		total_precip_to_surface:units = mm/day ;
	float32 column_int_dQu(tile, time, y, x) ;
		column_int_dQu:long_name = <dQu> column integrated eastward wind tendency from ML ;
		column_int_dQu:units = Pa ;
	float32 column_int_dQv(tile, time, y, x) ;
		column_int_dQv:long_name = <dQv> column integrated northward wind tendency from ML ;
		column_int_dQv:units = Pa ;
	float32 column_integrated_nQ1(tile, time, y, x) ;
		column_integrated_nQ1:long_name = <nQ1> column integrated heating from nudging ;
		column_integrated_nQ1:units = W/m^2 ;
	float32 column_integrated_nQ2(tile, time, y, x) ;
		column_integrated_nQ2:long_name = <nQ2> column integrated moistening from nudging ;
		column_integrated_nQ2:units = mm/day ;
	float64 column_integrated_dQ1_or_nQ1(time, tile, y, x) ;
		column_integrated_dQ1_or_nQ1:long_name = <dQ1> column integrated moistening from ML ;
		column_integrated_dQ1_or_nQ1:units = W/m^2 ;
	float64 column_integrated_dQ2_or_nQ2(time, tile, y, x) ;
		column_integrated_dQ2_or_nQ2:long_name = <dQ2> column integrated moistening from ML ;
		column_integrated_dQ2_or_nQ2:units = mm/day ;
	float64 minus_column_integrated_q2(tile, time, y, x) ;
		minus_column_integrated_q2:long_name = -<Q2> column integrated drying ;
		minus_column_integrated_q2:units = mm/day ;

// global attributes:
	:filename = atmos_dt_atmos.tile1.nc ;
	:grid_tile = N/A ;
	:grid_type = regular ;
	:path = /mnt/data/rundir/atmos_dt_atmos.zarr ;
	:title = default_experiment ;
}
x dc9136a3153fe1adada82a1b225b8d1d
y dc9136a3153fe1adada82a1b225b8d1d
time 48706651e4f065eb9b4915d4c31ab35a
Verification
xarray.Dataset {
dimensions:
	x = 48 ;
	y = 48 ;
	time = 104 ;
	tile = 6 ;

variables:
	float32 x(x) ;
		x:cartesian_axis = X ;
		x:long_name = T-cell longitude ;
		x:units = degrees_E ;
	float32 y(y) ;
		y:cartesian_axis = Y ;
		y:long_name = T-cell latitude ;
		y:units = degrees_N ;
	object time(time) ;
	float32 PRESsfc(tile, time, y, x) ;
		PRESsfc:cell_methods = time: point ;
		PRESsfc:long_name = surface pressure ;
		PRESsfc:units = Pa ;
	float32 PRMSL(tile, time, y, x) ;
		PRMSL:cell_methods = time: point ;
		PRMSL:long_name = sea-level pressure ;
		PRMSL:units = mb ;
		PRMSL:valid_range = [800.0, 1200.0] ;
	float32 PWAT(tile, time, y, x) ;
		PWAT:cell_methods = time: point ;
		PWAT:long_name = Total water path ;
		PWAT:units = kg/m**2 ;
	float32 RH1000(tile, time, y, x) ;
		RH1000:cell_methods = time: point ;
		RH1000:long_name = 1000-mb relative humidity ;
		RH1000:units = % ;
	float32 RH500(tile, time, y, x) ;
		RH500:cell_methods = time: point ;
		RH500:long_name = 500-mb relative humidity ;
		RH500:units = % ;
	float32 RH700(tile, time, y, x) ;
		RH700:cell_methods = time: point ;
		RH700:long_name = 700-mb relative humidity ;
		RH700:units = % ;
	float32 RH850(tile, time, y, x) ;
		RH850:cell_methods = time: point ;
		RH850:long_name = 850-mb relative humidity ;
		RH850:units = % ;
	float32 RH925(tile, time, y, x) ;
		RH925:cell_methods = time: point ;
		RH925:long_name = 925-mb relative humidity ;
		RH925:units = % ;
	float32 TMP200(tile, time, y, x) ;
		TMP200:cell_methods = time: point ;
		TMP200:long_name = 200-mb temperature ;
		TMP200:units = K ;
	float32 TMP500(tile, time, y, x) ;
		TMP500:cell_methods = time: point ;
		TMP500:long_name = 500-mb temperature ;
		TMP500:units = K ;
	float32 TMP500_300(tile, time, y, x) ;
		TMP500_300:cell_methods = time: point ;
		TMP500_300:long_name = mean 300-500 mb temp ;
		TMP500_300:units = K ;
	float32 TMP850(tile, time, y, x) ;
		TMP850:cell_methods = time: point ;
		TMP850:long_name = 850-mb temperature ;
		TMP850:units = K ;
	float32 TMPlowest(tile, time, y, x) ;
		TMPlowest:cell_methods = time: point ;
		TMPlowest:long_name = lowest layer temperature ;
		TMPlowest:units = K ;
	float32 UGRD200(tile, time, y, x) ;
		UGRD200:cell_methods = time: point ;
		UGRD200:long_name = 200-mb u ;
		UGRD200:units = m/s ;
	float32 UGRD50(tile, time, y, x) ;
		UGRD50:cell_methods = time: point ;
		UGRD50:long_name = 50-mb u ;
		UGRD50:units = m/s ;
	float32 UGRD500(tile, time, y, x) ;
		UGRD500:cell_methods = time: point ;
		UGRD500:long_name = 500-mb u ;
		UGRD500:units = m/s ;
	float32 UGRD850(tile, time, y, x) ;
		UGRD850:cell_methods = time: point ;
		UGRD850:long_name = 850-mb u ;
		UGRD850:units = m/s ;
	float32 UGRDlowest(tile, time, y, x) ;
		UGRDlowest:cell_methods = time: point ;
		UGRDlowest:long_name = surface u-wind ;
		UGRDlowest:units = m/sec ;
		UGRDlowest:valid_range = [-200.0, 200.0] ;
	float32 VGRD200(tile, time, y, x) ;
		VGRD200:cell_methods = time: point ;
		VGRD200:long_name = 200-mb v ;
		VGRD200:units = m/s ;
	float32 VGRD50(tile, time, y, x) ;
		VGRD50:cell_methods = time: point ;
		VGRD50:long_name = 50-mb v ;
		VGRD50:units = m/s ;
	float32 VGRD500(tile, time, y, x) ;
		VGRD500:cell_methods = time: point ;
		VGRD500:long_name = 500-mb v ;
		VGRD500:units = m/s ;
	float32 VGRD850(tile, time, y, x) ;
		VGRD850:cell_methods = time: point ;
		VGRD850:long_name = 850-mb v ;
		VGRD850:units = m/s ;
	float32 VGRDlowest(tile, time, y, x) ;
		VGRDlowest:cell_methods = time: point ;
		VGRDlowest:long_name = surface v-wind ;
		VGRDlowest:units = m/sec ;
		VGRDlowest:valid_range = [-200.0, 200.0] ;
	float32 VIL(tile, time, y, x) ;
		VIL:cell_methods = time: point ;
		VIL:long_name = Liquid water path ;
		VIL:units = kg/m**2 ;
	float32 VORT200(tile, time, y, x) ;
		VORT200:cell_methods = time: point ;
		VORT200:long_name = 200-mb vorticity ;
		VORT200:units = 1/s ;
	float32 VORT500(tile, time, y, x) ;
		VORT500:cell_methods = time: point ;
		VORT500:long_name = 500-mb vorticity ;
		VORT500:units = 1/s ;
	float32 VORT850(tile, time, y, x) ;
		VORT850:cell_methods = time: point ;
		VORT850:long_name = 850-mb vorticity ;
		VORT850:units = 1/s ;
	float32 area(tile, y, x) ;
		area:cell_methods = time: point ;
		area:long_name = cell area ;
		area:units = m**2 ;
	float32 h200(tile, time, y, x) ;
		h200:cell_methods = time: point ;
		h200:long_name = 200-mb height ;
		h200:units = m ;
	float32 h500(tile, time, y, x) ;
		h500:cell_methods = time: point ;
		h500:long_name = 500-mb height ;
		h500:units = m ;
	float32 h850(tile, time, y, x) ;
		h850:cell_methods = time: point ;
		h850:long_name = 850-mb height ;
		h850:units = m ;
	float32 iw(tile, time, y, x) ;
		iw:cell_methods = time: point ;
		iw:long_name = Ice water path ;
		iw:units = kg/m**2 ;
	float32 kinetic_energy(tile, time, y, x) ;
		kinetic_energy:cell_methods = time: point ;
		kinetic_energy:long_name = Total KE ;
		kinetic_energy:units = m^2/s^2 ;
	float32 total_energy(tile, time, y, x) ;
		total_energy:cell_methods = time: point ;
		total_energy:long_name = Total Energy ;
		total_energy:units = J/kg ;
	float32 w200(tile, time, y, x) ;
		w200:cell_methods = time: point ;
		w200:long_name = 200-mb w-wind ;
		w200:units = m/s ;
	float32 w500(tile, time, y, x) ;
		w500:cell_methods = time: point ;
		w500:long_name = 500-mb w-wind ;
		w500:units = m/s ;
	float32 w850(tile, time, y, x) ;
		w850:cell_methods = time: point ;
		w850:long_name = 850-mb w-wind ;
		w850:units = m/s ;
	float64 net_heating(time, tile, y, x) ;
		net_heating:units = W/m^2 ;
		net_heating:long_name = net_heating ;
	float64 net_moistening(time, tile, y, x) ;
		net_moistening:units = kg/m^2/s ;
		net_moistening:long_name = net_moistening ;
	float64 physics_precip(time, tile, y, x) ;
		physics_precip:units = kg/m^2/s ;
		physics_precip:long_name = physics_precip ;
	float64 water_vapor_path(time, tile, y, x) ;
		water_vapor_path:long_name = water vapor path ;
		water_vapor_path:units = mm ;
	float32 CPRATsfc(tile, time, y, x) ;
		CPRATsfc:cell_methods = time: point ;
		CPRATsfc:long_name = averaged bucket surface convective precipitation rate ;
		CPRATsfc:units = kg/m**2/s ;
	float32 DLWRFsfc(tile, time, y, x) ;
		DLWRFsfc:cell_methods = time: point ;
		DLWRFsfc:long_name = surface downward longwave flux ;
		DLWRFsfc:units = W/m**2 ;
	float32 DPT2m(tile, time, y, x) ;
		DPT2m:cell_methods = time: point ;
		DPT2m:long_name = 2 meter dew point temperature ;
		DPT2m:units = K ;
	float32 DSWRFsfc(tile, time, y, x) ;
		DSWRFsfc:cell_methods = time: point ;
		DSWRFsfc:long_name = averaged surface downward shortwave flux ;
		DSWRFsfc:units = W/m**2 ;
	float32 DSWRFtoa(tile, time, y, x) ;
		DSWRFtoa:cell_methods = time: point ;
		DSWRFtoa:long_name = top of atmos downward shortwave flux ;
		DSWRFtoa:units = W/m**2 ;
	float32 GRAUPELsfc(tile, time, y, x) ;
		GRAUPELsfc:cell_methods = time: point ;
		GRAUPELsfc:long_name = bucket surface graupel precipitation rate ;
		GRAUPELsfc:units = kg/m**2/s ;
	float32 HPBLsfc(tile, time, y, x) ;
		HPBLsfc:cell_methods = time: point ;
		HPBLsfc:long_name = surface planetary boundary layer height ;
		HPBLsfc:units = m ;
	float32 ICECsfc(tile, time, y, x) ;
		ICECsfc:cell_methods = time: point ;
		ICECsfc:long_name = surface ice concentration (ice=1; no ice=0) ;
		ICECsfc:units = fraction ;
	float32 ICEsfc(tile, time, y, x) ;
		ICEsfc:cell_methods = time: point ;
		ICEsfc:long_name = bucket surface ice precipitation rate ;
		ICEsfc:units = kg/m**2/s ;
	float32 LHTFLsfc(tile, time, y, x) ;
		LHTFLsfc:cell_methods = time: point ;
		LHTFLsfc:long_name = surface latent heat flux ;
		LHTFLsfc:units = w/m**2 ;
	float32 MAXWIND10m(tile, time, y, x) ;
		MAXWIND10m:cell_methods = time: point ;
		MAXWIND10m:long_name = maximum wind speed ;
		MAXWIND10m:units = m/s ;
	float32 PRATEsfc(tile, time, y, x) ;
		PRATEsfc:cell_methods = time: point ;
		PRATEsfc:long_name = bucket surface precipitation rate ;
		PRATEsfc:units = kg/m**2/s ;
	float32 SHTFLsfc(tile, time, y, x) ;
		SHTFLsfc:cell_methods = time: point ;
		SHTFLsfc:long_name = surface sensible heat flux ;
		SHTFLsfc:units = w/m**2 ;
	float32 SLMSKsfc(tile, time, y, x) ;
		SLMSKsfc:cell_methods = time: point ;
		SLMSKsfc:long_name = sea-land-ice mask (0-sea, 1-land, 2-ice) ;
		SLMSKsfc:units = numerical ;
	float32 SNOWsfc(tile, time, y, x) ;
		SNOWsfc:cell_methods = time: point ;
		SNOWsfc:long_name = bucket surface snow precipitation rate ;
		SNOWsfc:units = kg/m**2/s ;
	float32 SOILM(tile, time, y, x) ;
		SOILM:cell_methods = time: point ;
		SOILM:long_name = total column soil moisture content ;
		SOILM:units = kg/m**2 ;
	float32 SOILT1(tile, time, y, x) ;
		SOILT1:cell_methods = time: point ;
		SOILT1:long_name = soil temperature 0-10cm ;
		SOILT1:units = K ;
	float32 SOILT2(tile, time, y, x) ;
		SOILT2:cell_methods = time: point ;
		SOILT2:long_name = soil temperature 10-40cm ;
		SOILT2:units = K ;
	float32 SOILT3(tile, time, y, x) ;
		SOILT3:cell_methods = time: point ;
		SOILT3:long_name = soil temperature 40-100cm ;
		SOILT3:units = K ;
	float32 SOILT4(tile, time, y, x) ;
		SOILT4:cell_methods = time: point ;
		SOILT4:long_name = soil temperature 100-200cm ;
		SOILT4:units = K ;
	float32 SPFH2m(tile, time, y, x) ;
		SPFH2m:cell_methods = time: point ;
		SPFH2m:long_name = 2m specific humidity ;
		SPFH2m:units = kg/kg ;
	float32 TMAX2m(tile, time, y, x) ;
		TMAX2m:cell_methods = time: point ;
		TMAX2m:long_name = max temperature at 2m height ;
		TMAX2m:units = K ;
	float32 TMP2m(tile, time, y, x) ;
		TMP2m:cell_methods = time: point ;
		TMP2m:long_name = 2m temperature ;
		TMP2m:units = K ;
	float32 TMPsfc(tile, time, y, x) ;
		TMPsfc:cell_methods = time: point ;
		TMPsfc:long_name = surface temperature ;
		TMPsfc:units = K ;
	float32 UGRD10m(tile, time, y, x) ;
		UGRD10m:cell_methods = time: point ;
		UGRD10m:long_name = 10 meter u wind ;
		UGRD10m:units = m/s ;
	float32 ULWRFsfc(tile, time, y, x) ;
		ULWRFsfc:cell_methods = time: point ;
		ULWRFsfc:long_name = surface upward longwave flux ;
		ULWRFsfc:units = W/m**2 ;
	float32 ULWRFtoa(tile, time, y, x) ;
		ULWRFtoa:cell_methods = time: point ;
		ULWRFtoa:long_name = top of atmos upward longwave flux ;
		ULWRFtoa:units = W/m**2 ;
	float32 USWRFsfc(tile, time, y, x) ;
		USWRFsfc:cell_methods = time: point ;
		USWRFsfc:long_name = averaged surface upward shortwave flux ;
		USWRFsfc:units = W/m**2 ;
	float32 USWRFtoa(tile, time, y, x) ;
		USWRFtoa:cell_methods = time: point ;
		USWRFtoa:long_name = top of atmos upward shortwave flux ;
		USWRFtoa:units = W/m**2 ;
	float32 VGRD10m(tile, time, y, x) ;
		VGRD10m:cell_methods = time: point ;
		VGRD10m:long_name = 10 meter v wind ;
		VGRD10m:units = m/s ;
	float32 uflx(tile, time, y, x) ;
		uflx:cell_methods = time: point ;
		uflx:long_name = instantaneous u component of surface stress ;
		uflx:units = XXX ;
	float32 vflx(tile, time, y, x) ;
		vflx:cell_methods = time: point ;
		vflx:long_name = instantaneous v component of surface stress ;
		vflx:units = XXX ;
	float32 column_integrated_pQ1(tile, time, y, x) ;
		column_integrated_pQ1:long_name = <pQ1> column integrated heating from physics ;
		column_integrated_pQ1:units = W/m^2 ;
	float64 column_integrated_pQ2(tile, time, y, x) ;
		column_integrated_pQ2:long_name = <pQ2> column integrated moistening from physics ;
		column_integrated_pQ2:units = mm/day ;
	float64 column_integrated_dQ1(time, tile, y, x) ;
		column_integrated_dQ1:long_name = <dQ1> column integrated heating from ML ;
		column_integrated_dQ1:units = W/m^2 ;
	float64 column_integrated_dQ2(time, tile, y, x) ;
		column_integrated_dQ2:long_name = <dQ2> column integrated moistening from ML ;
		column_integrated_dQ2:units = mm/day ;
	float64 column_integrated_Q1(tile, time, y, x) ;
		column_integrated_Q1:long_name = <Q1> column integrated heating from physics + ML + nudging ;
		column_integrated_Q1:units = W/m^2 ;
	float64 column_integrated_Q2(tile, time, y, x) ;
		column_integrated_Q2:long_name = <Q2> column integrated moistening from physics + ML + nudging ;
		column_integrated_Q2:units = mm/day ;
	float64 total_precip_to_surface(tile, time, y, x) ;
		total_precip_to_surface:long_name = total precip to surface (max(PRATE-<dQ2>-<nQ2>, 0)) ;
		total_precip_to_surface:units = mm/day ;
	float32 column_int_dQu(tile, time, y, x) ;
		column_int_dQu:long_name = <dQu> column integrated eastward wind tendency from ML ;
		column_int_dQu:units = Pa ;
	float32 column_int_dQv(tile, time, y, x) ;
		column_int_dQv:long_name = <dQv> column integrated northward wind tendency from ML ;
		column_int_dQv:units = Pa ;
	float32 column_integrated_nQ1(tile, time, y, x) ;
		column_integrated_nQ1:long_name = <nQ1> column integrated heating from nudging ;
		column_integrated_nQ1:units = W/m^2 ;
	float32 column_integrated_nQ2(tile, time, y, x) ;
		column_integrated_nQ2:long_name = <nQ2> column integrated moistening from nudging ;
		column_integrated_nQ2:units = mm/day ;
	float64 column_integrated_dQ1_or_nQ1(time, tile, y, x) ;
		column_integrated_dQ1_or_nQ1:long_name = <dQ1> column integrated moistening from ML ;
		column_integrated_dQ1_or_nQ1:units = W/m^2 ;
	float64 column_integrated_dQ2_or_nQ2(time, tile, y, x) ;
		column_integrated_dQ2_or_nQ2:long_name = <dQ2> column integrated moistening from ML ;
		column_integrated_dQ2_or_nQ2:units = mm/day ;
	float64 minus_column_integrated_q2(tile, time, y, x) ;
		minus_column_integrated_q2:long_name = -<Q2> column integrated drying ;
		minus_column_integrated_q2:units = mm/day ;

// global attributes:
	:filename = atmos_dt_atmos.tile1.nc ;
	:grid_tile = N/A ;
	:grid_type = regular ;
	:path = /mnt/data/rundir/atmos_dt_atmos.zarr ;
	:title = default_experiment ;
}
x dc9136a3153fe1adada82a1b225b8d1d
y dc9136a3153fe1adada82a1b225b8d1d
time 48706651e4f065eb9b4915d4c31ab35a
grid
xarray.Dataset {
dimensions:
	tile = 6 ;
	y = 48 ;
	x = 48 ;
	y_interface = 49 ;
	x_interface = 49 ;

variables:
	int64 tile(tile) ;
	float32 area(tile, y, x) ;
		area:cell_methods = time: point ;
		area:long_name = cell area ;
		area:units = m**2 ;
	float32 lat(tile, y, x) ;
		lat:cell_methods = time: point ;
		lat:long_name = latitude ;
		lat:units = degrees_N ;
	float32 latb(tile, y_interface, x_interface) ;
		latb:cell_methods = time: point ;
		latb:long_name = latitude ;
		latb:units = degrees_N ;
	float32 lon(tile, y, x) ;
		lon:cell_methods = time: point ;
		lon:long_name = longitude ;
		lon:units = degrees_E ;
	float32 lonb(tile, y_interface, x_interface) ;
		lonb:cell_methods = time: point ;
		lonb:long_name = longitude ;
		lonb:units = degrees_E ;
	float64 x(x) ;
		x:cartesian_axis = X ;
		x:long_name = T-cell longitude ;
		x:units = degrees_E ;
	float64 x_interface(x_interface) ;
		x_interface:cartesian_axis = X ;
		x_interface:long_name = cell corner longitude ;
		x_interface:units = degrees_E ;
	float64 y(y) ;
		y:cartesian_axis = Y ;
		y:long_name = T-cell latitude ;
		y:units = degrees_N ;
	float64 y_interface(y_interface) ;
		y_interface:cartesian_axis = Y ;
		y_interface:long_name = cell corner latitude ;
		y_interface:units = degrees_N ;
	float64 land_sea_mask(tile, y, x) ;
		land_sea_mask:units =  ;
		land_sea_mask:long_name = land_sea_mask ;

// global attributes:
}
tile bb5a5b78a4c18795cf6ea10ab18b84dc
x 62828491827a146d12b842d73f965371
x_interface 8062ce3b8dd2f97ff35b3d26189231ca
y 62828491827a146d12b842d73f965371
y_interface 8062ce3b8dd2f97ff35b3d26189231ca
