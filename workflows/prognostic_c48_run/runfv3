#!/bin/bash
#
# Implementation Notes:
#
# This program is implemented using an entity-based paradigm. This is suitable
# for distributed workflows that modify remote resources.
#
# The functions in an entity-based API only allow for operations create, read,
# update, and delete (CRUD). These operations are applied to the entities to
# define the behavior of the system. Using only CRUD operations moves the state
# of the run execution into these entities, and makes the logic less reliant on
# local state, and therefore easier to translate to a distributed context.
#
# For a segmented run "Runs" and "Segments" are the main entities. Runs have
# many segments and some global data stores.


function usage {
    echo "This script can create segmented runs and appending segments to them."
    echo "It also provides low level commands used for debugging."
    echo "A segmented run can be local or on Google Cloud Storage."
    echo "Google Cloud Storage locations should start with 'gs:'."
    echo ""
    echo "Usage:"
    echo " runfv3 create <outputUrl> <fv3configFile>" > /dev/stderr
    echo " runfv3 append <outputUrl>" > /dev/stderr
    echo " runfv3 run-native <fv3config> <rundir>" > /dev/stderr
    echo ""
    echo "Segmented Run Commands:"
    echo "  create      Initialize a segmented run in GCS"
    echo "  append      Append a segment to a segmented run"
    echo ""
    echo "Low-level Commands:"
    echo "  run-native  Setup a run-directory and run the model. Used for "
    echo "              testing/debugging."
    echo ""
}


function createRun {
    url="$1"
    fv3config="$2"

    segmented-run-create $url $fv3config
}

set -e
set -o pipefail


command="$1"

if [[ -n "$GOOGLE_APPLICATION_CREDENTIALS" ]]
then
    gcloud auth activate-service-account --key-file "$GOOGLE_APPLICATION_CREDENTIALS" 2> /dev/null
fi

case "$command" in 
    "create")
        shift
        createRun $@
        ;;
    "append")
        shift
        appendSegment "$1"
        ;;
    "run-native")
        shift
        runSegment $@
        ;;
    *)
        usage
        exit 1
        ;;
esac

