xarray.Dataset {
dimensions:
	time = 12 ;
	tile = 6 ;
	sample = 24 ;
	z = 63 ;

variables:
	float32 air_pressure(time, tile, sample, z) ;
		air_pressure:field_dims = ["horizontal_dimension", "vertical_dimension"] ;
		air_pressure:fortran_name = "prsl" ;
		air_pressure:intent = "in" ;
		air_pressure:kind = "kind_phys" ;
		air_pressure:long_name = "layer mean air pressure" ;
		air_pressure:optional = "F" ;
		air_pressure:standard_name = "air_pressure" ;
		air_pressure:type = "real" ;
		air_pressure:units = "Pa" ;
	float32 air_temperature_after_gscond(time, tile, sample, z) ;
		air_temperature_after_gscond:units = unknown ;
	float32 air_temperature_after_last_gscond(time, tile, sample, z) ;
		air_temperature_after_last_gscond:field_dims = ["horizontal_dimension", "vertical_dimension"] ;
		air_temperature_after_last_gscond:fortran_name = "tp" ;
		air_temperature_after_last_gscond:intent = "inout" ;
		air_temperature_after_last_gscond:kind = "kind_phys" ;
		air_temperature_after_last_gscond:long_name = "air temperature after gscond was last called" ;
		air_temperature_after_last_gscond:optional = "F" ;
		air_temperature_after_last_gscond:standard_name = "air_temperature_after_last_gscond" ;
		air_temperature_after_last_gscond:type = "real" ;
		air_temperature_after_last_gscond:units = "K" ;
	float32 air_temperature_after_precpd(time, tile, sample, z) ;
		air_temperature_after_precpd:units = unknown ;
	float32 air_temperature_dummy(time, tile, sample, z) ;
		air_temperature_dummy:units = unknown ;
	float32 air_temperature_input(time, tile, sample, z) ;
		air_temperature_input:field_dims = ["horizontal_dimension", "vertical_dimension"] ;
		air_temperature_input:fortran_name = "t" ;
		air_temperature_input:intent = "inout" ;
		air_temperature_input:kind = "kind_phys" ;
		air_temperature_input:long_name = "layer mean air temperature" ;
		air_temperature_input:optional = "F" ;
		air_temperature_input:standard_name = "air_temperature" ;
		air_temperature_input:type = "real" ;
		air_temperature_input:units = "K" ;
	float32 cloud_water_mixing_ratio_after_gscond(time, tile, sample, z) ;
		cloud_water_mixing_ratio_after_gscond:units = unknown ;
	float32 cloud_water_mixing_ratio_after_precpd(time, tile, sample, z) ;
		cloud_water_mixing_ratio_after_precpd:units = unknown ;
	float32 cloud_water_mixing_ratio_input(time, tile, sample, z) ;
		cloud_water_mixing_ratio_input:field_dims = ["horizontal_dimension", "vertical_dimension"] ;
		cloud_water_mixing_ratio_input:fortran_name = "cwm" ;
		cloud_water_mixing_ratio_input:intent = "out" ;
		cloud_water_mixing_ratio_input:kind = "kind_phys" ;
		cloud_water_mixing_ratio_input:long_name = "moist cloud condensed water mixing ratio" ;
		cloud_water_mixing_ratio_input:optional = "F" ;
		cloud_water_mixing_ratio_input:standard_name = "cloud_water_mixing_ratio" ;
		cloud_water_mixing_ratio_input:type = "real" ;
		cloud_water_mixing_ratio_input:units = "kg kg-1" ;
	float32 latitude(time, tile, sample) ;
		latitude:field_dims = "(horizontal_dimension)" ;
		latitude:fortran_name = "xlat" ;
		latitude:intent = "in" ;
		latitude:kind = "kind_phys" ;
		latitude:long_name = "grid latitude in radians" ;
		latitude:optional = "F" ;
		latitude:standard_name = "latitude" ;
		latitude:type = "real" ;
		latitude:units = "radians" ;
	float32 longitude(time, tile, sample) ;
		longitude:field_dims = "(horizontal_dimension)" ;
		longitude:fortran_name = "xlon" ;
		longitude:intent = "in" ;
		longitude:kind = "kind_phys" ;
		longitude:long_name = "grid longitude in radians" ;
		longitude:optional = "F" ;
		longitude:standard_name = "longitude" ;
		longitude:type = "real" ;
		longitude:units = "radians" ;
	float32 pressure_thickness_of_atmospheric_layer(time, tile, sample, z) ;
		pressure_thickness_of_atmospheric_layer:field_dims = ["horizontal_dimension", "vertical_dimension"] ;
		pressure_thickness_of_atmospheric_layer:fortran_name = "del" ;
		pressure_thickness_of_atmospheric_layer:intent = "in" ;
		pressure_thickness_of_atmospheric_layer:kind = "kind_phys" ;
		pressure_thickness_of_atmospheric_layer:long_name = "pressure level thickness" ;
		pressure_thickness_of_atmospheric_layer:optional = "F" ;
		pressure_thickness_of_atmospheric_layer:standard_name = "air_pressure_difference_between_midlayers" ;
		pressure_thickness_of_atmospheric_layer:type = "real" ;
		pressure_thickness_of_atmospheric_layer:units = "Pa" ;
	float32 ratio_of_snowfall_to_rainfall(time, tile, sample) ;
		ratio_of_snowfall_to_rainfall:field_dims = ["horizontal_dimension"] ;
		ratio_of_snowfall_to_rainfall:fortran_name = "sr" ;
		ratio_of_snowfall_to_rainfall:intent = "out" ;
		ratio_of_snowfall_to_rainfall:kind = "kind_phys" ;
		ratio_of_snowfall_to_rainfall:long_name = "ratio of snowfall to large-scale rainfall" ;
		ratio_of_snowfall_to_rainfall:optional = "F" ;
		ratio_of_snowfall_to_rainfall:standard_name = "ratio_of_snowfall_to_rainfall" ;
		ratio_of_snowfall_to_rainfall:type = "real" ;
		ratio_of_snowfall_to_rainfall:units = "frac" ;
	float32 specific_humidity_after_gscond(time, tile, sample, z) ;
		specific_humidity_after_gscond:units = unknown ;
	float32 specific_humidity_after_last_gscond(time, tile, sample, z) ;
		specific_humidity_after_last_gscond:field_dims = ["horizontal_dimension", "vertical_dimension"] ;
		specific_humidity_after_last_gscond:fortran_name = "qp1" ;
		specific_humidity_after_last_gscond:intent = "inout" ;
		specific_humidity_after_last_gscond:kind = "kind_phys" ;
		specific_humidity_after_last_gscond:long_name = "water vapor specific humidity after gscond was last called" ;
		specific_humidity_after_last_gscond:optional = "F" ;
		specific_humidity_after_last_gscond:standard_name = "specific_humidity_after_last_gscond" ;
		specific_humidity_after_last_gscond:type = "real" ;
		specific_humidity_after_last_gscond:units = "kg kg-1" ;
	float32 specific_humidity_after_precpd(time, tile, sample, z) ;
		specific_humidity_after_precpd:units = unknown ;
	float32 specific_humidity_input(time, tile, sample, z) ;
		specific_humidity_input:field_dims = ["horizontal_dimension", "vertical_dimension"] ;
		specific_humidity_input:fortran_name = "q" ;
		specific_humidity_input:intent = "inout" ;
		specific_humidity_input:kind = "kind_phys" ;
		specific_humidity_input:long_name = "water vapor specific humidity" ;
		specific_humidity_input:optional = "F" ;
		specific_humidity_input:standard_name = "specific_humidity" ;
		specific_humidity_input:type = "real" ;
		specific_humidity_input:units = "kg kg-1" ;
	float32 surface_air_pressure(time, tile, sample) ;
		surface_air_pressure:field_dims = ["horizontal_dimension"] ;
		surface_air_pressure:fortran_name = "ps" ;
		surface_air_pressure:intent = "in" ;
		surface_air_pressure:kind = "kind_phys" ;
		surface_air_pressure:long_name = "surface pressure" ;
		surface_air_pressure:optional = "F" ;
		surface_air_pressure:standard_name = "surface_air_pressure" ;
		surface_air_pressure:type = "real" ;
		surface_air_pressure:units = "Pa" ;
	float32 surface_air_pressure_after_last_gscond(time, tile, sample) ;
		surface_air_pressure_after_last_gscond:field_dims = ["horizontal_dimension"] ;
		surface_air_pressure_after_last_gscond:fortran_name = "psp1" ;
		surface_air_pressure_after_last_gscond:intent = "inout" ;
		surface_air_pressure_after_last_gscond:kind = "kind_phys" ;
		surface_air_pressure_after_last_gscond:long_name = "surface air surface pressure after gscond was last called" ;
		surface_air_pressure_after_last_gscond:optional = "F" ;
		surface_air_pressure_after_last_gscond:standard_name = "surface_air_pressure_after_last_gscond" ;
		surface_air_pressure_after_last_gscond:type = "real" ;
		surface_air_pressure_after_last_gscond:units = "Pa" ;
	float32 tendency_of_rain_water_mixing_ratio_due_to_microphysics(time, tile, sample, z) ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:field_dims = ["horizontal_dimension", "vertical_dimension"] ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:fortran_name = "rainp" ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:intent = "out" ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:kind = "kind_phys" ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:long_name = "tendency of rain water mixing ratio due to microphysics" ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:optional = "F" ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:standard_name = "tendency_of_rain_water_mixing_ratio_due_to_microphysics" ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:type = "real" ;
		tendency_of_rain_water_mixing_ratio_due_to_microphysics:units = "kg kg-1 s-1" ;
	object time(time) ;
	float32 total_precipitation(time, tile, sample) ;
		total_precipitation:field_dims = ["horizontal_dimension"] ;
		total_precipitation:fortran_name = "rn" ;
		total_precipitation:intent = "out" ;
		total_precipitation:kind = "kind_phys" ;
		total_precipitation:long_name = "explicit precipitation amount on physics timestep" ;
		total_precipitation:optional = "F" ;
		total_precipitation:standard_name = "total_precipitation" ;
		total_precipitation:type = "real" ;
		total_precipitation:units = "m" ;

// global attributes:
}