apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: train-diags-prog
spec:
  entrypoint: train-diags-prog
  volumes:
    - name: workdir
      emptyVol: {}
    - name: dshm
      emptyDir:
        medium: Memory
    - name: gcp-key-secret
      secret:
        defaultMode: 420
        secretName: gcp-key
  templates:
  - name: train-diags-prog
    inputs:
      parameters:
      - name: tag
      - name: training-configs  # used in withParam
      - name: training-data-config
      - {name: validation-data-config, value: " "}
      - name: test-data-config
      - name: prognostic-run-config
      - name: flags
        value: " "
      - name: public-report-output
      - {name: bucket, value: "vcm-ml-experiments"}
      - {name: project, value: "default"}
      - {name: segment-count, value: "1"}
      - {name: cpu-prog, value: "6"}
      - {name: memory-prog, value: 6Gi}
      - {name: cpu-training, value: "1"}
      - {name: memory-training, value: 6Gi}
      - {name: memory-offline-diags, value: 10Gi}
      - {name: training-flags, value: " "}
      - {name: online-diags-flags, value: " "}
      - {name: do-prognostic-run, value: "true"}
    dag:
      tasks:
      - name: resolve-output-url
        templateRef:
          name: resolve-output-url
          template: resolve-output-url
        arguments:
          parameters:
            - name: bucket
              value: "{{inputs.parameters.bucket}}"
            - name: project
              value: "{{inputs.parameters.project}}"
            - name: tag
              value: "{{inputs.parameters.tag}}"
      - name: train-model
        dependencies: [resolve-output-url]
        templateRef:
          name: training
          template: training
        withParam: "{{workflow.parameters.training-configs}}"
        arguments:
          parameters:
            - name: training_config
              value: "{{item.config}}"
            - name: training_data_config
              value: "{{inputs.parameters.training-data-config}}"
            - name: validation_data_config
              value: "{{inputs.parameters.validation-data-config}}"
            - name: output
              value: "{{tasks.resolve-output-url.outputs.result}}/trained_models/{{item.name}}"
            - name: cpu
              value: "{{inputs.parameters.cpu-training}}"
            - name: memory
              value: "{{inputs.parameters.memory-training}}"
            - name: flags
              value: "{{inputs.parameters.training-flags}}"
      - name: offline-diags
        dependencies: [train-model]
        templateRef:
          name: offline-diags
          template: offline-diags
        withParam: "{{workflow.parameters.training-configs}}"
        arguments:
          parameters:
              - name: ml-model
                value: "{{tasks.resolve-output-url.outputs.result}}/trained_models/{{item.name}}"
              - name: training_config
                value: "{{item.config}}"
              - name: training_data_config
                value: "{{inputs.parameters.training-data-config}}"
              - name: test_data_config
                value: "{{inputs.parameters.test-data-config}}"
              - name: offline-diags-output
                value: "{{tasks.resolve-output-url.outputs.result}}/offline_diags/{{item.name}}"
              - name: report-output
                value: "{{inputs.parameters.public-report-output}}/{{item.name}}"
              - name: memory
                value: "{{inputs.parameters.memory-offline-diags}}"
      - name: construct-full-flags
        dependencies: [resolve-output-url]
        template: construct-full-flags
        arguments:
          parameters:
              - name: root
                value: "{{tasks.resolve-output-url.outputs.result}}"
              - name: training-configs
                value: "{{inputs.parameters.training-configs}}"
              - name: flags
                value: "{{inputs.parameters.flags}}"
      - name: prognostic-run
        when: "{{inputs.parameters.do-prognostic-run}} == true"
        templateRef:
          name: prognostic-run
          template: prognostic-run
        dependencies: [train-model, construct-full-flags]
        arguments:
          parameters:
              - name: config
                value: "{{inputs.parameters.prognostic-run-config}}"
              - name: bucket
                value: "{{inputs.parameters.bucket}}"
              - name: project
                value: "{{inputs.parameters.project}}"
              - name: tag
                value: "{{inputs.parameters.tag}}"
              - name: flags
                value: "{{tasks.construct-full-flags.outputs.parameters.prognostic-flags}}"
              - name: models-dir
                value: "{{tasks.resolve-output-url.outputs.result}}/trained_models"
              - name: segment-count
                value: "{{inputs.parameters.segment-count}}"
              - name: cpu
                value: "{{inputs.parameters.cpu-prog}}"
              - name: memory
                value: "{{inputs.parameters.memory-prog}}"
              - name: online-diags-flags
                value: "{{inputs.parameters.online-diags-flags}}"
  - name: construct-full-flags
    inputs:
      parameters:
        - {name: root}
        - {name: training-configs}
        - {name: flags}
    outputs:
      parameters:
      - name: prognostic-flags
        valueFrom:
          path: /tmp/prognostic-flags.txt
    container:
      image: bash:4.4
      command: ["bash", "-c", "-x", "-e"]
      args:
        - |
          FLAGS_OUTPUT=/tmp/prognostic-flags.txt

          apk add --no-cache jq

          configs='{{inputs.parameters.training-configs}}'

          echo "{{inputs.parameters.flags}} " | tr '\n' ' ' > $FLAGS_OUTPUT
          echo "$configs" | jq -c '.[]' | \
          while IFS= read -r line;
          do
              model=$( echo $line | jq -j '.name, "\n"');
              echo "--model_url {{inputs.parameters.root}}/trained_models/${model}" | tr '\n' ' ' >>  $FLAGS_OUTPUT
          done