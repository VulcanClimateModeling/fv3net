# vim: set sts=2 ts=2 tw=2 sw=2 :
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: training
spec:
  entrypoint: training
  volumes:
    - name: workdir
      emptyVol: {}
    - name: gcp-key-secret
      secret:
        defaultMode: 420
        secretName: gcp-key
  templates:
    - name: training
      inputs:
        parameters:
          - name: training_config
          - name: training_data_config
          - {name: validation_data_config, value: " "}
          - name: output
          - {name: cpu, value: 1000m}
          - {name: memory, value: 6Gi}
          - {name: flags, value: " "}
          - {name: no-wandb, value: "false"}
          - {name: wandb-project, value: "argo-default"}
          - {name: wandb-tags, value: ""}
          - {name: wandb-group, value: ""}
      container:
        image: us.gcr.io/vcm-ml/prognostic_run
        command: ["bash", "-c", "-x"]
        env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /secret/gcp-credentials/key.json
          - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
            value: /secret/gcp-credentials/key.json
          - name: WANDB_ENTITY
            value: ai2cm
          - name: WANDB_PROJECT
            value: "{{inputs.parameters.wandb-project}}"
          - name: WANDB_RUN_GROUP
            value: "{{inputs.parameters.wandb-group}}"
        envFrom:
          - secretRef:
              name: wandb-token
        volumeMounts:
          - mountPath: /secret/gcp-credentials
            name: gcp-key-secret
        args:
          - |

            if [ ! -z {{inputs.parameters.wandb-tags}} ]; then
              TAGS={{inputs.parameters.wandb-tags}}
              # strip possible trailing comma
              export WANDB_TAGS=$( echo $TAGS | sed 's/,$//' )
            fi

            cat <<EOF >training_config.yaml
            {{inputs.parameters.training_config}}
            EOF

            cat <<EOF >training_data.yaml
            {{inputs.parameters.training_data_config}}
            EOF

            cat <<EOF >validation_data.yaml
            {{inputs.parameters.validation_data_config}}
            EOF

            echo "Training Configuration:"
            cat training_config.yaml
            echo "Training Data Configuration:"
            cat training_data.yaml
            echo "Validation Data Configuration:"
            cat validation_data.yaml

            if grep -q '[^[:space:]]' "validation_data.yaml";
            then
                validation_arg="--validation-data-config validation_data.yaml"
            else
                validation_arg=" "
            fi

            if [ "{{inputs.parameters.no-wandb}}" == "false" ] || [[ "{{inputs.parameters.flags}}" == *"--no-wandb"* ]];
            then
              wandb_flag=""
            else
              wandb_flag="--no-wandb"
            fi

            python3 -m fv3fit.train \
              training_config.yaml \
              training_data.yaml \
              {{inputs.parameters.output}} \
              $validation_arg \
              {{inputs.parameters.flags}} \
              $wandb_flag
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "med-sim-pool"
        effect: "NoSchedule"
      podSpecPatch: |
        containers:
          - name: main
            resources:
              limits:
                cpu: "{{inputs.parameters.cpu}}"
                memory: "{{inputs.parameters.memory}}"
              requests:
                cpu: "{{inputs.parameters.cpu}}"
                memory: "{{inputs.parameters.memory}}"
