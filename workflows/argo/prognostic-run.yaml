# vim: set sts=2 ts=2 tw=2 sw=2 :
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: prognostic-run
spec:
  entrypoint: prognostic-run
  volumes:
    - name: workdir
      emptyVol: {}
    - name: dshm
      emptyDir:
        medium: Memory
    - name: gcp-key-secret
      secret:
        defaultMode: 420
        secretName: gcp-key
  templates:
    - name: prognostic-run
      inputs:
        parameters:
          - {name: config}
          - {name: tag}
          - {name: bucket, value: "vcm-ml-experiments"}
          - {name: project, value: "default"}
          - {name: segment-count, value: "1"}
          - {name: cpu, value: "6"}
          - {name: memory, value: 6Gi}
          - {name: online-diags-flags, value: " "}
          - {name: online-diags, value: "true"}
      steps:
      - - name: resolve-output-url
          templateRef:
            name: resolve-output-url
            template: resolve-output-url
          arguments:
            parameters:
              - {name: bucket, value: "{{inputs.parameters.bucket}}"}
              - {name: project, value: "{{inputs.parameters.project}}"}
              - {name: tag, value: "{{inputs.parameters.tag}}"}
      - - name: prepare-input-config  # This is the HighLevelConfig
          template: prepare-input-config
          arguments:
            parameters:
              - {name: config, value: "{{inputs.parameters.config}}"}
      - - template: get-fortran-model
          name: get-fortran-model
          arguments:
            artifacts:
              - name: config
                from: "{{steps.prepare-input-config.outputs.artifacts.config}}"
            parameters:
              - {name: config, value: "{{inputs.parameters.config}}"}
      - - name: prepare-config-fv3gfs
          template: prepare-config-fv3gfs
          when: "{{steps.get-fortran-model.outputs.result}} == fv3gfs"
          arguments:
            artifacts:
              - name: config
                from: "{{steps.prepare-input-config.outputs.artifacts.config}}"
      - - name: prepare-config-shield
          template: prepare-config-shield
          when: "{{steps.get-fortran-model.outputs.result}} == shield"
          arguments:
            artifacts:
              - name: config
                from: "{{steps.prepare-input-config.outputs.artifacts.config}}"
      - - name: run-model-fv3gfs
          continueOn:
            failed: true
          when: "{{steps.get-fortran-model.outputs.result}} == fv3gfs"
          templateRef:
            name: run-fv3gfs
            template: run-fv3gfs
          arguments:
            artifacts:
              - {name: fv3config, from: "{{steps.prepare-config-fv3gfs.outputs.artifacts.fv3config}}"}
            parameters:
              - {name: output-url, value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run"}
              - {name: segment-count, value: "{{inputs.parameters.segment-count}}"}
              - {name: cpu, value: "{{inputs.parameters.cpu}}"}
              - {name: memory, value: "{{inputs.parameters.memory}}"}
      - - name: run-model-shield
          continueOn:
            failed: true
          when: "{{steps.get-fortran-model.outputs.result}} == shield"
          templateRef:
            name: run-shield
            template: run-shield
          arguments:
            artifacts:
              - {name: fv3config, from: "{{steps.prepare-config-shield.outputs.artifacts.fv3config}}"}
            parameters:
              - {name: output-url, value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run"}
              - {name: segment-count, value: "{{inputs.parameters.segment-count}}"}
              - {name: cpu, value: "{{inputs.parameters.cpu}}"}
              - {name: memory, value: "{{inputs.parameters.memory}}"}
      - - name: online-diags
          when: "{{inputs.parameters.online-diags}} == true"
          templateRef:
            name: prognostic-run-diags
            template: diagnostics
          arguments:
            parameters:
                - name: run
                  value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run"
                - name: output
                  value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run_diagnostics"
                - name: flags
                  value: "{{inputs.parameters.online-diags-flags}}"
      - - name: online-diags-report
          when: "{{inputs.parameters.online-diags}} == true"
          templateRef:
            name: prognostic-run-diags
            template: report-single-run
          arguments:
            parameters:
                - name: diags-url
                  value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run_diagnostics"
      - - name: exit
          template: exit
          when: "{{steps.run-model-fv3gfs.status}} == Failed || {{steps.run-model-shield.status}} == Failed}"
    - name: exit
      container:
        image: ubuntu:20.04
        command: ["exit", "1"]
    - name: prepare-input-config
      inputs:
        parameters:
          - name: config
      outputs:
        artifacts:
          - {name: config, path: /tmp/config.yaml}
      container:
        image: bash
        command: ["bash", "-c", "-x", "-e"]
        volumeMounts:
          - name: workdir
            mountPath: /tmp
        args:
          - |
            cat << EOF > /tmp/config.yaml
            {{inputs.parameters.config}}
            EOF
    - name: prepare-config-fv3gfs
      inputs:
        artifacts:
          - name: config
            path: /tmp/config.yaml
      outputs:
        artifacts:
          - {name: fv3config, path: /tmp/fv3config.yaml}
      container:
        image: us.gcr.io/vcm-ml/prognostic_run
        resources:
          requests:
            memory: "500Mi"
            cpu: "700m"
          limits:
            memory: "500Mi"
            cpu: "700m"
        command: ["bash", "-c", "-x", "-e"]
        workingDir: /fv3net/workflows/prognostic_c48_run
        volumeMounts:
          - name: workdir
            mountPath: /tmp
        args:
          - prepare-config /tmp/config.yaml > /tmp/fv3config.yaml
    - name: prepare-config-shield
      inputs:
        artifacts:
          - name: config
            path: /tmp/config.yaml
      outputs:
        artifacts:
          - {name: fv3config, path: /tmp/fv3config.yaml}
      container:
        image: us.gcr.io/vcm-ml/prognostic_run_shield
        resources:
          requests:
            memory: "500Mi"
            cpu: "700m"
          limits:
            memory: "500Mi"
            cpu: "700m"
        command: ["bash", "-c", "-x", "-e"]
        workingDir: /fv3net/workflows/prognostic_c48_run
        volumeMounts:
          - name: workdir
            mountPath: /tmp
        args:
          # Without setting the DGLBACKEND some additional text gets added to the
          # prepared config (it's a warning that the default backend was set to
          # pytorch).  We'll need to sort out why this happens in this image but
          # not the FV3GFS prognostic run image.
          - DGLBACKEND=pytorch prepare-config /tmp/config.yaml > /tmp/fv3config.yaml
    - name: get-fortran-model
      inputs:
        artifacts:
          - name: config
            path: /mnt/data/config.yaml
      script:
        image: us.gcr.io/vcm-ml/fv3net
        command: [python]
        source: |
          import yaml

          with open("/mnt/data/config.yaml", "r") as file:
              config = yaml.safe_load(file)

          print(config.get("fortran_model", "fv3gfs"))
