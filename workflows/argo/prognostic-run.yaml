# vim: set sts=2 ts=2 tw=2 sw=2 :
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: prognostic-run
spec:
  entrypoint: prognostic-run
  volumes:
    - name: workdir
      emptyVol: {}
    - name: dshm
      emptyDir:
        medium: Memory
    - name: gcp-key-secret
      secret:
        defaultMode: 420
        secretName: gcp-key
  templates:
    - name: prognostic-run
      inputs:
        parameters:
          - {name: config}
          - {name: tag}
          - {name: flags, value: ""}
          - {name: bucket, value: "vcm-ml-experiments"}
          - {name: project, value: "default"}
          - {name: segment-count, value: "1"}
          - {name: cpu, value: "6"}
          - {name: memory, value: 6Gi}
          - {name: online-diags-flags, value: " "}
          - {name: online-diags, value: "true"}
      steps:
      - - name: resolve-output-url
          templateRef:
            name: resolve-output-url
            template: resolve-output-url
          arguments:
            parameters:
              - {name: bucket, value: "{{inputs.parameters.bucket}}"}
              - {name: project, value: "{{inputs.parameters.project}}"}
              - {name: tag, value: "{{inputs.parameters.tag}}"}
      - - name: prepare-config
          template: prepare-config
          arguments:
            parameters:
              - {name: config, value: "{{inputs.parameters.config}}"}
              - {name: flags, value: "{{inputs.parameters.flags}}"}
      - - name: run-model
          continueOn:
            failed: true
          templateRef:
            name: run-fv3gfs
            template: run-fv3gfs
          arguments:
            artifacts:
              - {name: fv3config, from: "{{steps.prepare-config.outputs.artifacts.fv3config}}"}
            parameters:
              - {name: output-url, value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run"}
              - {name: segment-count, value: "{{inputs.parameters.segment-count}}"}
              - {name: cpu, value: "{{inputs.parameters.cpu}}"}
              - {name: memory, value: "{{inputs.parameters.memory}}"}
      - - name: online-diags
          when: "{{inputs.parameters.online-diags}} == true"
          templateRef:
            name: prognostic-run-diags
            template: diagnostics
          arguments:
            parameters:
                - name: run
                  value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run"
                - name: output
                  value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run_diagnostics"
                - name: flags
                  value: "{{inputs.parameters.online-diags-flags}}"
      - - name: online-diags-report
          when: "{{inputs.parameters.online-diags}} == true"
          templateRef:
            name: prognostic-run-diags
            template: report-single-run
          arguments:
            parameters:
                - name: diags-url
                  value: "{{steps.resolve-output-url.outputs.result}}/fv3gfs_run_diagnostics"
      - - name: exit
          template: exit
          when: "{{steps.run-model.status}} == Failed"
    - name: exit
      container:
        image: ubuntu:20.04
        command: ["exit", "1"]
    - name: prepare-config
      inputs:
        parameters:
          - name: config
          - name: flags
      outputs:
        artifacts:
          - {name: fv3config, path: /tmp/fv3config.yaml}
      container:
        image: us.gcr.io/vcm-ml/prognostic_run
        command: ["bash", "-c", "-x", "-e"]
        workingDir: /fv3net/workflows/prognostic_c48_run
        volumeMounts:
          - name: workdir 
            mountPath: /tmp
        args:
          - |
            cat << EOF > config.yaml
            {{inputs.parameters.config}}
            EOF

            prepare-config \
              {{inputs.parameters.flags}} \
              config.yaml \
              > /tmp/fv3config.yaml
