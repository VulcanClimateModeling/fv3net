# vim: set sts=2 ts=2 tw=2 sw=2 :
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: restart-prognostic-run
spec:
  entrypoint: restart-prognostic-run
  volumes:
    - name: workdir
      emptyVol: {}
    - name: dshm
      emptyDir:
        medium: Memory
    - name: gcp-key-secret
      secret:
        defaultMode: 420
        secretName: gcp-key
  templates:
    - name: restart-prognostic-run
      inputs:
        parameters:
          - {name: url}
          - {name: segment-count, value: "1"}
          - {name: cpu, value: "6"}
          - {name: memory, value: 6Gi}
      steps:
      - - name: choose-node-pool
          templateRef:
            name: run-simulation
            template: choose-node-pool
          arguments:
            parameters:
              - {name: cpu-request, value: "{{inputs.parameters.cpu}}"}
              - {name: cpu-cutoff, value: "24"}
              - {name: memory-request, value: "{{inputs.parameters.memory}}"}
              - {name: memory-cutoff, value: "30"}
      - - name: infer-wrapper
          template: infer-wrapper
          arguments:
            parameters:
              - {name: url, value: "{{inputs.parameters.url}}"}
      - - &restart-run-fv3gfs
          name: restart-run-fv3gfs
          when: "'{{steps.infer-wrapper.outputs.result}}' == 'fv3gfs.wrapper'"
          templateRef:
            name: run-simulation
            template: run-all-segments
          arguments:
            parameters:
              - {name: output-url, value: "{{inputs.parameters.url}}"}
              - {name: segment-count, value: "{{inputs.parameters.segment-count}}"}
              - {name: cpu, value: "{{inputs.parameters.cpu}}"}
              - {name: memory, value: "{{inputs.parameters.memory}}"}
              - {name: node-pool, value: "{{steps.choose-node-pool.outputs.result}}"}
              - {name: segment, value: 0}
      - - <<: *restart-run-fv3gfs
          name: restart-run-shield
          when: "'{{steps.infer-wrapper.outputs.result}}' == 'shield.wrapper'"
          templateRef:
            name: run-simulation
            template: run-all-segments-shield
    - name: infer-wrapper
      inputs:
        parameters:
          - name: url
      script:
        image:
          us.gcr.io/vcm-ml/fv3net
        command: [python]
        source: |
          import os
          import fsspec
          import yaml

          config_path = os.path.join("{{inputs.parameters.url}}", "fv3config.yml")
          fs, *_ = fsspec.get_fs_token_paths(config_path)
          with fs.open(config_path, "r") as file:
              config = yaml.safe_load(file)

          print(config.get("wrapper", "fv3gfs.wrapper"))
