apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: run-fv3gfs
spec:
  arguments:
    parameters:
      - name: fv3config
      - name: runfile
      - name: fv3gfs-image  # any image with fv3gfs-wrapper and fv3config installed
      - name: output-url
      - name: post-process-image
      - {name: chunks, value: "{}"}
      - {name: cpu, value: "6"}
      - {name: memory, value: 4Gi}
      - {name: segment-count, value: "1"}
      - {name: work-volume-name, value: work-volume}
      - {name: external-volume-name, value: external-volume}
  entrypoint: run-fv3gfs
  templates:
  - name: run-fv3gfs
    inputs:
      parameters:
        - name: fv3config
        - name: runfile
        - name: fv3gfs-image
        - name: output-url
        - name: post-process-image
        - {name: chunks, value: "{}"}
        - {name: cpu, value: "6"}
        - {name: memory, value: 8Gi}
        - {name: segment-count, value: "1"}
        - {name: work-volume-name, value: work-volume}
        - {name: external-volume-name, value: external-volume}
    steps:
      - - name: write-configs
          template: write-configs
          arguments:
            parameters:
            - {name: fv3config, value: "{{inputs.parameters.fv3config}}"}
            - {name: runfile, value: "{{inputs.parameters.runfile}}"}
            - {name: chunks, value: "{{inputs.parameters.chunks}}"}
            - {name: work-volume-name, value: "{{inputs.parameters.work-volume-name}}"}
      # loop over segments implemented through recursion so that a failed segment will
      # terminate the workflow. Argo loops by default run in parallel and do not fail fast.
      - - name: run-first-segment  
          template: run-all-segments
          arguments:
            parameters:
            - {name: fv3gfs-image, value: "{{inputs.parameters.fv3gfs-image}}"}
            - {name: post-process-image, value: "{{inputs.parameters.post-process-image}}"}
            - {name: output-url, value: "{{inputs.parameters.output-url}}"}
            - {name: cpu, value: "{{inputs.parameters.cpu}}"}
            - {name: memory, value: "{{inputs.parameters.memory}}"}
            - {name: segment-count, value: "{{inputs.parameters.segment-count}}"}
            - {name: segment, value: 0}
            - {name: work-volume-name, value: "{{inputs.parameters.work-volume-name}}"}
            - {name: external-volume-name, value: "{{inputs.parameters.external-volume-name}}"}
  - name: write-configs
    inputs:
      parameters:
        - name: fv3config
        - name: runfile
        - name: chunks
        - name: work-volume-name
    container:
      image: ubuntu:latest
      volumeMounts:
        - name: "{{inputs.parameters.work-volume-name}}"
          mountPath: /mnt/data
      command: ["/bin/bash", "-c", "-x", "-e"]
      args:
      - |
        echo "{{inputs.parameters.fv3config}}" > /mnt/data/fv3config.yaml
        cat << EOFRUNFILE > /mnt/data/runfile.py
        {{inputs.parameters.runfile}}
        EOFRUNFILE
        cat /mnt/data/runfile.py
        echo "{{inputs.parameters.chunks}}" > /mnt/data/chunks.yaml
  - name: run-all-segments
    inputs:
      parameters:
        - name: fv3gfs-image
        - name: post-process-image
        - name: output-url
        - name: cpu
        - name: memory
        - name: segment-count
        - name: segment
        - name: work-volume-name
        - name: external-volume-name
    steps:
      - - template: run-segment
          name: run-segment
          arguments:
            parameters:
            - {name: fv3gfs-image, value: "{{inputs.parameters.fv3gfs-image}}"}
            - {name: post-process-image, value: "{{inputs.parameters.post-process-image}}"}
            - {name: output-url, value: "{{inputs.parameters.output-url}}"}
            - {name: cpu, value: "{{inputs.parameters.cpu}}"}
            - {name: memory, value: "{{inputs.parameters.memory}}"}
            - {name: work-volume-name, value: "{{inputs.parameters.work-volume-name}}"}
            - {name: external-volume-name, value: "{{inputs.parameters.external-volume-name}}"}
      - - name: increment-segment
          template: increment-segment
          arguments:
            parameters:
              - {name: segment, value: "{{inputs.parameters.segment}}"}
      - - name: run-next-segment
          template: run-all-segments
          when: "{{steps.increment-segment.outputs.result}} < {{inputs.parameters.segment-count}}"
          arguments:
            parameters:
            - {name: fv3gfs-image, value: "{{inputs.parameters.fv3gfs-image}}"}
            - {name: post-process-image, value: "{{inputs.parameters.post-process-image}}"}
            - {name: output-url, value: "{{inputs.parameters.output-url}}"}
            - {name: cpu, value: "{{inputs.parameters.cpu}}"}
            - {name: memory, value: "{{inputs.parameters.memory}}"}
            - {name: segment-count, value: "{{inputs.parameters.segment-count}}"}
            - {name: segment, value: "{{steps.increment-segment.outputs.result}}"}
            - {name: work-volume-name, value: "{{inputs.parameters.work-volume-name}}"}
            - {name: external-volume-name, value: "{{inputs.parameters.external-volume-name}}"}
  - name: run-segment
    inputs:
      parameters:
        - name: fv3gfs-image
        - name: post-process-image
        - name: output-url
        - name: cpu
        - name: memory
        - name: work-volume-name
        - name: external-volume-name
    steps:
      - - name: run-model
          template: run-model
          arguments:
            parameters:
              - {name: fv3gfs-image, value: "{{inputs.parameters.fv3gfs-image}}"}
              - {name: cpu, value: "{{inputs.parameters.cpu}}"}
              - {name: memory, value: "{{inputs.parameters.memory}}"}
              - {name: work-volume-name, value: "{{inputs.parameters.work-volume-name}}"}
              - {name: external-volume-name, value: "{{inputs.parameters.external-volume-name}}"}
      - - name: upload-outputs
          template: post-process
          arguments:
            parameters:
              - {name: post-process-image, value: "{{inputs.parameters.post-process-image}}"}
              - {name: output-url, value: "{{inputs.parameters.output-url}}"}
              - {name: work-volume-name, value: "{{inputs.parameters.work-volume-name}}"}
      - - name: update-config
          template: update-config
          arguments:
            parameters:
              - {name: restarts-url, value: "/mnt/data/RESTART"}
              - {name: work-volume-name, value: "{{inputs.parameters.work-volume-name}}"}
  - name: run-model
    inputs:
      parameters:
        - name: fv3gfs-image
        - name: cpu
        - name: memory
        - name: work-volume-name
        - name: external-volume-name
    tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "climate-sim-pool"
      effect: "NoSchedule"
    podSpecPatch: |
      containers:
        - name: main
          resources:
            limits:
              cpu: "{{inputs.parameters.cpu}}"
              memory: "{{inputs.parameters.memory}}"
            requests:
              cpu: "{{inputs.parameters.cpu}}"
              memory: "{{inputs.parameters.memory}}"
    container:
      image: '{{inputs.parameters.fv3gfs-image}}'
      command:
        - python
        - -m
        - fv3config.fv3run._native_main
        - '[["/mnt/data/fv3config.yaml", "/mnt/data/rundir"],
          {"runfile": "/mnt/data/runfile.py", "capture_output": false}]'
      env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /secret/gcp-credentials/key.json
        - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
          value: /secret/gcp-credentials/key.json
      imagePullPolicy: Always
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - name: "{{inputs.parameters.work-volume-name}}"
          mountPath: /mnt/data
        - name: "{{inputs.parameters.external-volume-name}}"
          mountPath: /mnt/input
        - name: gcp-key-secret
          mountPath: /secret/gcp-credentials
          readOnly: true
  - name: post-process
    inputs:
      parameters:
        - name: post-process-image
        - name: output-url
        - name: work-volume-name
    tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "climate-sim-pool"
      effect: "NoSchedule"
    container:
      image: "{{inputs.parameters.post-process-image}}"
      command: ["/bin/bash", "-c", "-e"]
      args:
      - |
        post_process.py --chunks /mnt/data/chunks.yaml /mnt/data/rundir /tmp/processed_rundir
        append.py /tmp/processed_rundir {{inputs.parameters.output-url}}
        rsync -r /mnt/data/rundir/RESTART/ /mnt/data/RESTART/
        rm -r /mnt/data/rundir
        rm -r /tmp/processed_rundir
      volumeMounts:
        - name: "{{inputs.parameters.work-volume-name}}"
          mountPath: /mnt/data
        - name: gcp-key-secret
          mountPath: /secret/gcp-credentials
          readOnly: true
      resources:
        limits:
          memory: 8Gi
        requests:
          cpu: "6"
          memory: 8Gi
  - name: update-config
    inputs:
      parameters:
        - name: restarts-url
        - name: work-volume-name
    container:
      image: mikefarah/yq:3.3.2
      command: ["/bin/sh", "-c"]
      # set initial conditions to restarts generated by previous segment and set namelist
      # parameters to be appropriate for a "warm-start" (i.e. initalized from restarts) run
      args: 
      - | 
        yq w -i /mnt/data/fv3config.yaml initial_conditions "{{inputs.parameters.restarts-url}}"
        yq w -i /mnt/data/fv3config.yaml namelist.fv_core_nml.external_ic false
        yq w -i /mnt/data/fv3config.yaml namelist.fv_core_nml.nggps_ic false
        yq w -i /mnt/data/fv3config.yaml namelist.fv_core_nml.make_nh false
        yq w -i /mnt/data/fv3config.yaml namelist.fv_core_nml.mountain true
        yq w -i /mnt/data/fv3config.yaml namelist.fv_core_nml.warm_start true
        yq w -i /mnt/data/fv3config.yaml namelist.fv_core_nml.na_init 0
        yq w -i /mnt/data/fv3config.yaml namelist.coupler_nml.force_date_from_namelist false
      volumeMounts:
        - name: "{{inputs.parameters.work-volume-name}}"
          mountPath: /mnt/data
  - name: increment-segment
    inputs:
      parameters:
        - name: segment
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        print({{inputs.parameters.segment}} + 1)
